
USART_HomeworkRopadilla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc0  08003fc0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fc0  08003fc0  00004fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc8  08003fc8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc8  08003fc8  00004fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fcc  08003fcc  00004fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fd0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003fdc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003fdc  000050dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa53  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a74  00000000  00000000  0000fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00011508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000609  00000000  00000000  00011ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026074  00000000  00000000  000122f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a555  00000000  00000000  00038365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed78d  00000000  00000000  000428ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130047  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f64  00000000  00000000  0013008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00131ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ed8 	.word	0x08003ed8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003ed8 	.word	0x08003ed8

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000270:	f000 b988 	b.w	8000584 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	468e      	mov	lr, r1
 8000294:	4604      	mov	r4, r0
 8000296:	4688      	mov	r8, r1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d14a      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029c:	428a      	cmp	r2, r1
 800029e:	4617      	mov	r7, r2
 80002a0:	d962      	bls.n	8000368 <__udivmoddi4+0xdc>
 80002a2:	fab2 f682 	clz	r6, r2
 80002a6:	b14e      	cbz	r6, 80002bc <__udivmoddi4+0x30>
 80002a8:	f1c6 0320 	rsb	r3, r6, #32
 80002ac:	fa01 f806 	lsl.w	r8, r1, r6
 80002b0:	fa20 f303 	lsr.w	r3, r0, r3
 80002b4:	40b7      	lsls	r7, r6
 80002b6:	ea43 0808 	orr.w	r8, r3, r8
 80002ba:	40b4      	lsls	r4, r6
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f fc87 	uxth.w	ip, r7
 80002c4:	fbb8 f1fe 	udiv	r1, r8, lr
 80002c8:	0c23      	lsrs	r3, r4, #16
 80002ca:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d2:	fb01 f20c 	mul.w	r2, r1, ip
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x62>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002e0:	f080 80ea 	bcs.w	80004b8 <__udivmoddi4+0x22c>
 80002e4:	429a      	cmp	r2, r3
 80002e6:	f240 80e7 	bls.w	80004b8 <__udivmoddi4+0x22c>
 80002ea:	3902      	subs	r1, #2
 80002ec:	443b      	add	r3, r7
 80002ee:	1a9a      	subs	r2, r3, r2
 80002f0:	b2a3      	uxth	r3, r4
 80002f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000302:	459c      	cmp	ip, r3
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x8e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800030c:	f080 80d6 	bcs.w	80004bc <__udivmoddi4+0x230>
 8000310:	459c      	cmp	ip, r3
 8000312:	f240 80d3 	bls.w	80004bc <__udivmoddi4+0x230>
 8000316:	443b      	add	r3, r7
 8000318:	3802      	subs	r0, #2
 800031a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031e:	eba3 030c 	sub.w	r3, r3, ip
 8000322:	2100      	movs	r1, #0
 8000324:	b11d      	cbz	r5, 800032e <__udivmoddi4+0xa2>
 8000326:	40f3      	lsrs	r3, r6
 8000328:	2200      	movs	r2, #0
 800032a:	e9c5 3200 	strd	r3, r2, [r5]
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d905      	bls.n	8000342 <__udivmoddi4+0xb6>
 8000336:	b10d      	cbz	r5, 800033c <__udivmoddi4+0xb0>
 8000338:	e9c5 0100 	strd	r0, r1, [r5]
 800033c:	2100      	movs	r1, #0
 800033e:	4608      	mov	r0, r1
 8000340:	e7f5      	b.n	800032e <__udivmoddi4+0xa2>
 8000342:	fab3 f183 	clz	r1, r3
 8000346:	2900      	cmp	r1, #0
 8000348:	d146      	bne.n	80003d8 <__udivmoddi4+0x14c>
 800034a:	4573      	cmp	r3, lr
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xc8>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 8105 	bhi.w	800055e <__udivmoddi4+0x2d2>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb6e 0203 	sbc.w	r2, lr, r3
 800035a:	2001      	movs	r0, #1
 800035c:	4690      	mov	r8, r2
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e5      	beq.n	800032e <__udivmoddi4+0xa2>
 8000362:	e9c5 4800 	strd	r4, r8, [r5]
 8000366:	e7e2      	b.n	800032e <__udivmoddi4+0xa2>
 8000368:	2a00      	cmp	r2, #0
 800036a:	f000 8090 	beq.w	800048e <__udivmoddi4+0x202>
 800036e:	fab2 f682 	clz	r6, r2
 8000372:	2e00      	cmp	r6, #0
 8000374:	f040 80a4 	bne.w	80004c0 <__udivmoddi4+0x234>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000380:	b280      	uxth	r0, r0
 8000382:	b2bc      	uxth	r4, r7
 8000384:	2101      	movs	r1, #1
 8000386:	fbb2 fcfe 	udiv	ip, r2, lr
 800038a:	fb0e 221c 	mls	r2, lr, ip, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb04 f20c 	mul.w	r2, r4, ip
 8000396:	429a      	cmp	r2, r3
 8000398:	d907      	bls.n	80003aa <__udivmoddi4+0x11e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x11c>
 80003a2:	429a      	cmp	r2, r3
 80003a4:	f200 80e0 	bhi.w	8000568 <__udivmoddi4+0x2dc>
 80003a8:	46c4      	mov	ip, r8
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b0:	fb0e 3312 	mls	r3, lr, r2, r3
 80003b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003b8:	fb02 f404 	mul.w	r4, r2, r4
 80003bc:	429c      	cmp	r4, r3
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x144>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x142>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f200 80ca 	bhi.w	8000562 <__udivmoddi4+0x2d6>
 80003ce:	4602      	mov	r2, r0
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003d6:	e7a5      	b.n	8000324 <__udivmoddi4+0x98>
 80003d8:	f1c1 0620 	rsb	r6, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 f706 	lsr.w	r7, r2, r6
 80003e2:	431f      	orrs	r7, r3
 80003e4:	fa0e f401 	lsl.w	r4, lr, r1
 80003e8:	fa20 f306 	lsr.w	r3, r0, r6
 80003ec:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fa00 f801 	lsl.w	r8, r0, r1
 80003fa:	fa1f fc87 	uxth.w	ip, r7
 80003fe:	fbbe f0f9 	udiv	r0, lr, r9
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	fb09 ee10 	mls	lr, r9, r0, lr
 8000408:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800040c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000410:	45a6      	cmp	lr, r4
 8000412:	fa02 f201 	lsl.w	r2, r2, r1
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1a0>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800041e:	f080 809c 	bcs.w	800055a <__udivmoddi4+0x2ce>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f240 8099 	bls.w	800055a <__udivmoddi4+0x2ce>
 8000428:	3802      	subs	r0, #2
 800042a:	443c      	add	r4, r7
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	fa1f fe83 	uxth.w	lr, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000440:	fb03 fc0c 	mul.w	ip, r3, ip
 8000444:	45a4      	cmp	ip, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1ce>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800044e:	f080 8082 	bcs.w	8000556 <__udivmoddi4+0x2ca>
 8000452:	45a4      	cmp	ip, r4
 8000454:	d97f      	bls.n	8000556 <__udivmoddi4+0x2ca>
 8000456:	3b02      	subs	r3, #2
 8000458:	443c      	add	r4, r7
 800045a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800045e:	eba4 040c 	sub.w	r4, r4, ip
 8000462:	fba0 ec02 	umull	lr, ip, r0, r2
 8000466:	4564      	cmp	r4, ip
 8000468:	4673      	mov	r3, lr
 800046a:	46e1      	mov	r9, ip
 800046c:	d362      	bcc.n	8000534 <__udivmoddi4+0x2a8>
 800046e:	d05f      	beq.n	8000530 <__udivmoddi4+0x2a4>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x1fe>
 8000472:	ebb8 0203 	subs.w	r2, r8, r3
 8000476:	eb64 0409 	sbc.w	r4, r4, r9
 800047a:	fa04 f606 	lsl.w	r6, r4, r6
 800047e:	fa22 f301 	lsr.w	r3, r2, r1
 8000482:	431e      	orrs	r6, r3
 8000484:	40cc      	lsrs	r4, r1
 8000486:	e9c5 6400 	strd	r6, r4, [r5]
 800048a:	2100      	movs	r1, #0
 800048c:	e74f      	b.n	800032e <__udivmoddi4+0xa2>
 800048e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000492:	0c01      	lsrs	r1, r0, #16
 8000494:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000498:	b280      	uxth	r0, r0
 800049a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800049e:	463b      	mov	r3, r7
 80004a0:	4638      	mov	r0, r7
 80004a2:	463c      	mov	r4, r7
 80004a4:	46b8      	mov	r8, r7
 80004a6:	46be      	mov	lr, r7
 80004a8:	2620      	movs	r6, #32
 80004aa:	fbb1 f1f7 	udiv	r1, r1, r7
 80004ae:	eba2 0208 	sub.w	r2, r2, r8
 80004b2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004b6:	e766      	b.n	8000386 <__udivmoddi4+0xfa>
 80004b8:	4601      	mov	r1, r0
 80004ba:	e718      	b.n	80002ee <__udivmoddi4+0x62>
 80004bc:	4610      	mov	r0, r2
 80004be:	e72c      	b.n	800031a <__udivmoddi4+0x8e>
 80004c0:	f1c6 0220 	rsb	r2, r6, #32
 80004c4:	fa2e f302 	lsr.w	r3, lr, r2
 80004c8:	40b7      	lsls	r7, r6
 80004ca:	40b1      	lsls	r1, r6
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	430a      	orrs	r2, r1
 80004d6:	fbb3 f8fe 	udiv	r8, r3, lr
 80004da:	b2bc      	uxth	r4, r7
 80004dc:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e0:	0c11      	lsrs	r1, r2, #16
 80004e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e6:	fb08 f904 	mul.w	r9, r8, r4
 80004ea:	40b0      	lsls	r0, r6
 80004ec:	4589      	cmp	r9, r1
 80004ee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004f2:	b280      	uxth	r0, r0
 80004f4:	d93e      	bls.n	8000574 <__udivmoddi4+0x2e8>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004fc:	d201      	bcs.n	8000502 <__udivmoddi4+0x276>
 80004fe:	4589      	cmp	r9, r1
 8000500:	d81f      	bhi.n	8000542 <__udivmoddi4+0x2b6>
 8000502:	eba1 0109 	sub.w	r1, r1, r9
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000512:	b292      	uxth	r2, r2
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	4542      	cmp	r2, r8
 800051a:	d229      	bcs.n	8000570 <__udivmoddi4+0x2e4>
 800051c:	18ba      	adds	r2, r7, r2
 800051e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000522:	d2c4      	bcs.n	80004ae <__udivmoddi4+0x222>
 8000524:	4542      	cmp	r2, r8
 8000526:	d2c2      	bcs.n	80004ae <__udivmoddi4+0x222>
 8000528:	f1a9 0102 	sub.w	r1, r9, #2
 800052c:	443a      	add	r2, r7
 800052e:	e7be      	b.n	80004ae <__udivmoddi4+0x222>
 8000530:	45f0      	cmp	r8, lr
 8000532:	d29d      	bcs.n	8000470 <__udivmoddi4+0x1e4>
 8000534:	ebbe 0302 	subs.w	r3, lr, r2
 8000538:	eb6c 0c07 	sbc.w	ip, ip, r7
 800053c:	3801      	subs	r0, #1
 800053e:	46e1      	mov	r9, ip
 8000540:	e796      	b.n	8000470 <__udivmoddi4+0x1e4>
 8000542:	eba7 0909 	sub.w	r9, r7, r9
 8000546:	4449      	add	r1, r9
 8000548:	f1a8 0c02 	sub.w	ip, r8, #2
 800054c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000550:	fb09 f804 	mul.w	r8, r9, r4
 8000554:	e7db      	b.n	800050e <__udivmoddi4+0x282>
 8000556:	4673      	mov	r3, lr
 8000558:	e77f      	b.n	800045a <__udivmoddi4+0x1ce>
 800055a:	4650      	mov	r0, sl
 800055c:	e766      	b.n	800042c <__udivmoddi4+0x1a0>
 800055e:	4608      	mov	r0, r1
 8000560:	e6fd      	b.n	800035e <__udivmoddi4+0xd2>
 8000562:	443b      	add	r3, r7
 8000564:	3a02      	subs	r2, #2
 8000566:	e733      	b.n	80003d0 <__udivmoddi4+0x144>
 8000568:	f1ac 0c02 	sub.w	ip, ip, #2
 800056c:	443b      	add	r3, r7
 800056e:	e71c      	b.n	80003aa <__udivmoddi4+0x11e>
 8000570:	4649      	mov	r1, r9
 8000572:	e79c      	b.n	80004ae <__udivmoddi4+0x222>
 8000574:	eba1 0109 	sub.w	r1, r1, r9
 8000578:	46c4      	mov	ip, r8
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	e7c4      	b.n	800050e <__udivmoddi4+0x282>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <HAL_UART_RxCpltCallback+0x8c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d137      	bne.n	800060a <HAL_UART_RxCpltCallback+0x82>
    if (uart_byte == '}') {
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <HAL_UART_RxCpltCallback+0x90>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b7d      	cmp	r3, #125	@ 0x7d
 80005a0:	d11b      	bne.n	80005da <HAL_UART_RxCpltCallback+0x52>
      if (command_index < CMD_MAX_LENGTH - 1) {
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b1e      	cmp	r3, #30
 80005a8:	d80a      	bhi.n	80005c0 <HAL_UART_RxCpltCallback+0x38>
        command_buffer[command_index++] = uart_byte;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	b2d1      	uxtb	r1, r2
 80005b2:	4a1a      	ldr	r2, [pc, #104]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005b4:	7011      	strb	r1, [r2, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <HAL_UART_RxCpltCallback+0x90>)
 80005ba:	7819      	ldrb	r1, [r3, #0]
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <HAL_UART_RxCpltCallback+0x98>)
 80005be:	5499      	strb	r1, [r3, r2]
      }
      command_buffer[command_index] = '\0';  // Null-terminate
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <HAL_UART_RxCpltCallback+0x98>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	5499      	strb	r1, [r3, r2]
      command_ready = 1;
 80005cc:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_UART_RxCpltCallback+0x9c>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
      command_index = 0;
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e012      	b.n	8000600 <HAL_UART_RxCpltCallback+0x78>
    } else {
      if (command_index < CMD_MAX_LENGTH - 1) {
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b1e      	cmp	r3, #30
 80005e0:	d80b      	bhi.n	80005fa <HAL_UART_RxCpltCallback+0x72>
        command_buffer[command_index++] = uart_byte;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	b2d1      	uxtb	r1, r2
 80005ea:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005ec:	7011      	strb	r1, [r2, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <HAL_UART_RxCpltCallback+0x90>)
 80005f2:	7819      	ldrb	r1, [r3, #0]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <HAL_UART_RxCpltCallback+0x98>)
 80005f6:	5499      	strb	r1, [r3, r2]
 80005f8:	e002      	b.n	8000600 <HAL_UART_RxCpltCallback+0x78>
      } else {
        command_index = 0;  // Reset on overflow
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <HAL_UART_RxCpltCallback+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
      }
    }

    // Continue receiving next byte
    HAL_UART_Receive_IT(&huart3, &uart_byte, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	4905      	ldr	r1, [pc, #20]	@ (8000618 <HAL_UART_RxCpltCallback+0x90>)
 8000604:	4808      	ldr	r0, [pc, #32]	@ (8000628 <HAL_UART_RxCpltCallback+0xa0>)
 8000606:	f002 f980 	bl	800290a <HAL_UART_Receive_IT>
  }
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40004800 	.word	0x40004800
 8000618:	200000b0 	.word	0x200000b0
 800061c:	200000d4 	.word	0x200000d4
 8000620:	200000b4 	.word	0x200000b4
 8000624:	200000d5 	.word	0x200000d5
 8000628:	20000028 	.word	0x20000028

0800062c <ParseCommand>:



void ParseCommand(char *cmd)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    // Trim CR, LF, or garbage past buffer
    for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e01a      	b.n	8000670 <ParseCommand+0x44>
        if (cmd[i] == '\r' || cmd[i] == '\n' || cmd[i] == '\0') {
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d00b      	beq.n	800065e <ParseCommand+0x32>
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b0a      	cmp	r3, #10
 8000650:	d005      	beq.n	800065e <ParseCommand+0x32>
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d105      	bne.n	800066a <ParseCommand+0x3e>
            cmd[i] = '\0';
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
            break;
 8000668:	e005      	b.n	8000676 <ParseCommand+0x4a>
    for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	2b1f      	cmp	r3, #31
 8000674:	dde1      	ble.n	800063a <ParseCommand+0xe>
        }
    }

    // Truncate at the first closing '}'
    char *end = strchr(cmd, '}');
 8000676:	217d      	movs	r1, #125	@ 0x7d
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f003 fbe9 	bl	8003e50 <strchr>
 800067e:	6138      	str	r0, [r7, #16]
    if (end != NULL) {
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <ParseCommand+0x62>
        *(end + 1) = '\0';  // Include the closing brace
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	3301      	adds	r3, #1
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"Parsing...\r\n", 13, HAL_MAX_DELAY);
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000692:	220d      	movs	r2, #13
 8000694:	494a      	ldr	r1, [pc, #296]	@ (80007c0 <ParseCommand+0x194>)
 8000696:	484b      	ldr	r0, [pc, #300]	@ (80007c4 <ParseCommand+0x198>)
 8000698:	f002 f8ae 	bl	80027f8 <HAL_UART_Transmit>

    // Validate structure
    if (strncmp(cmd, "{LED:", 5) != 0 ||
 800069c:	2205      	movs	r2, #5
 800069e:	494a      	ldr	r1, [pc, #296]	@ (80007c8 <ParseCommand+0x19c>)
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f003 fbe2 	bl	8003e6a <strncmp>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d113      	bne.n	80006d4 <ParseCommand+0xa8>
        cmd[7] != ',' ||
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3307      	adds	r3, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
    if (strncmp(cmd, "{LED:", 5) != 0 ||
 80006b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80006b4:	d10e      	bne.n	80006d4 <ParseCommand+0xa8>
        strncmp(&cmd[8], "STATE:", 6) != 0 ||
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3308      	adds	r3, #8
 80006ba:	2206      	movs	r2, #6
 80006bc:	4943      	ldr	r1, [pc, #268]	@ (80007cc <ParseCommand+0x1a0>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fbd3 	bl	8003e6a <strncmp>
 80006c4:	4603      	mov	r3, r0
        cmd[7] != ',' ||
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d104      	bne.n	80006d4 <ParseCommand+0xa8>
        cmd[16] != '}') {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3310      	adds	r3, #16
 80006ce:	781b      	ldrb	r3, [r3, #0]
        strncmp(&cmd[8], "STATE:", 6) != 0 ||
 80006d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80006d2:	d007      	beq.n	80006e4 <ParseCommand+0xb8>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Invalid format\r\n", 17, HAL_MAX_DELAY);
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d8:	2211      	movs	r2, #17
 80006da:	493d      	ldr	r1, [pc, #244]	@ (80007d0 <ParseCommand+0x1a4>)
 80006dc:	4839      	ldr	r0, [pc, #228]	@ (80007c4 <ParseCommand+0x198>)
 80006de:	f002 f88b 	bl	80027f8 <HAL_UART_Transmit>
 80006e2:	e069      	b.n	80007b8 <ParseCommand+0x18c>
        return;
    }

    // Extract LED ID and state
    char led_id[3] = { cmd[5], cmd[6], '\0' };
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	733b      	strb	r3, [r7, #12]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	737b      	strb	r3, [r7, #13]
 80006f0:	2300      	movs	r3, #0
 80006f2:	73bb      	strb	r3, [r7, #14]
    char state[3]  = { cmd[14], cmd[15], '\0' };
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7b9b      	ldrb	r3, [r3, #14]
 80006f8:	723b      	strb	r3, [r7, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7bdb      	ldrb	r3, [r3, #15]
 80006fe:	727b      	strb	r3, [r7, #9]
 8000700:	2300      	movs	r3, #0
 8000702:	72bb      	strb	r3, [r7, #10]

    GPIO_PinState pin_state = (strcmp(state, "ON") == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4932      	ldr	r1, [pc, #200]	@ (80007d4 <ParseCommand+0x1a8>)
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd94 	bl	8000238 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf0c      	ite	eq
 8000716:	2301      	moveq	r3, #1
 8000718:	2300      	movne	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	73fb      	strb	r3, [r7, #15]

    if (strcmp(led_id, "01") == 0) {
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	492d      	ldr	r1, [pc, #180]	@ (80007d8 <ParseCommand+0x1ac>)
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd87 	bl	8000238 <strcmp>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10d      	bne.n	800074c <ParseCommand+0x120>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pin_state);   // LD1 Green
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	461a      	mov	r2, r3
 8000734:	2101      	movs	r1, #1
 8000736:	4829      	ldr	r0, [pc, #164]	@ (80007dc <ParseCommand+0x1b0>)
 8000738:	f000 fe90 	bl	800145c <HAL_GPIO_WritePin>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Green toggled\r\n", 16, HAL_MAX_DELAY);
 800073c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000740:	2210      	movs	r2, #16
 8000742:	4927      	ldr	r1, [pc, #156]	@ (80007e0 <ParseCommand+0x1b4>)
 8000744:	481f      	ldr	r0, [pc, #124]	@ (80007c4 <ParseCommand+0x198>)
 8000746:	f002 f857 	bl	80027f8 <HAL_UART_Transmit>
 800074a:	e035      	b.n	80007b8 <ParseCommand+0x18c>
    } else if (strcmp(led_id, "02") == 0) {
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4924      	ldr	r1, [pc, #144]	@ (80007e4 <ParseCommand+0x1b8>)
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd70 	bl	8000238 <strcmp>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10d      	bne.n	800077a <ParseCommand+0x14e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state);   // LD2 Blue
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	461a      	mov	r2, r3
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	481d      	ldr	r0, [pc, #116]	@ (80007dc <ParseCommand+0x1b0>)
 8000766:	f000 fe79 	bl	800145c <HAL_GPIO_WritePin>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Blue toggled\r\n", 15, HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076e:	220f      	movs	r2, #15
 8000770:	491d      	ldr	r1, [pc, #116]	@ (80007e8 <ParseCommand+0x1bc>)
 8000772:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <ParseCommand+0x198>)
 8000774:	f002 f840 	bl	80027f8 <HAL_UART_Transmit>
 8000778:	e01e      	b.n	80007b8 <ParseCommand+0x18c>
    } else if (strcmp(led_id, "03") == 0) {
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	491b      	ldr	r1, [pc, #108]	@ (80007ec <ParseCommand+0x1c0>)
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd59 	bl	8000238 <strcmp>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10e      	bne.n	80007aa <ParseCommand+0x17e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state);  // LD3 Red
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	461a      	mov	r2, r3
 8000790:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000794:	4811      	ldr	r0, [pc, #68]	@ (80007dc <ParseCommand+0x1b0>)
 8000796:	f000 fe61 	bl	800145c <HAL_GPIO_WritePin>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Red toggled\r\n", 14, HAL_MAX_DELAY);
 800079a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800079e:	220e      	movs	r2, #14
 80007a0:	4913      	ldr	r1, [pc, #76]	@ (80007f0 <ParseCommand+0x1c4>)
 80007a2:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <ParseCommand+0x198>)
 80007a4:	f002 f828 	bl	80027f8 <HAL_UART_Transmit>
 80007a8:	e006      	b.n	80007b8 <ParseCommand+0x18c>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)"Unknown LED ID\r\n", 17, HAL_MAX_DELAY);
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ae:	2211      	movs	r2, #17
 80007b0:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <ParseCommand+0x1c8>)
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <ParseCommand+0x198>)
 80007b4:	f002 f820 	bl	80027f8 <HAL_UART_Transmit>
    }
}
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	08003ef0 	.word	0x08003ef0
 80007c4:	20000028 	.word	0x20000028
 80007c8:	08003f00 	.word	0x08003f00
 80007cc:	08003f08 	.word	0x08003f08
 80007d0:	08003f10 	.word	0x08003f10
 80007d4:	08003f24 	.word	0x08003f24
 80007d8:	08003f28 	.word	0x08003f28
 80007dc:	40020400 	.word	0x40020400
 80007e0:	08003f2c 	.word	0x08003f2c
 80007e4:	08003f3c 	.word	0x08003f3c
 80007e8:	08003f40 	.word	0x08003f40
 80007ec:	08003f50 	.word	0x08003f50
 80007f0:	08003f54 	.word	0x08003f54
 80007f4:	08003f64 	.word	0x08003f64

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fa5c 	bl	8000cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f879 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f917 	bl	8000a38 <MX_GPIO_Init>

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LD1
 800080a:	2101      	movs	r1, #1
 800080c:	4832      	ldr	r0, [pc, #200]	@ (80008d8 <main+0xe0>)
 800080e:	f000 fe3e 	bl	800148e <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000816:	f000 faad 	bl	8000d74 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);   // LD2
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	482e      	ldr	r0, [pc, #184]	@ (80008d8 <main+0xe0>)
 800081e:	f000 fe36 	bl	800148e <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000826:	f000 faa5 	bl	8000d74 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3
 800082a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800082e:	482a      	ldr	r0, [pc, #168]	@ (80008d8 <main+0xe0>)
 8000830:	f000 fe2d 	bl	800148e <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000838:	f000 fa9c 	bl	8000d74 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);   // LD1
 800083c:	2101      	movs	r1, #1
 800083e:	4826      	ldr	r0, [pc, #152]	@ (80008d8 <main+0xe0>)
 8000840:	f000 fe25 	bl	800148e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000848:	f000 fa94 	bl	8000d74 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);   // LD2
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	4822      	ldr	r0, [pc, #136]	@ (80008d8 <main+0xe0>)
 8000850:	f000 fe1d 	bl	800148e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000854:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000858:	f000 fa8c 	bl	8000d74 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3
 800085c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000860:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <main+0xe0>)
 8000862:	f000 fe14 	bl	800148e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086a:	f000 fa83 	bl	8000d74 <HAL_Delay>

  MX_USART3_UART_Init();
 800086e:	f000 f8b3 	bl	80009d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char *startup_msg = "STM32 Ready. Send LED commands...\r\n";
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <main+0xe4>)
 8000874:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)startup_msg, strlen(startup_msg), HAL_MAX_DELAY);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff fce8 	bl	800024c <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	4816      	ldr	r0, [pc, #88]	@ (80008e0 <main+0xe8>)
 8000888:	f001 ffb6 	bl	80027f8 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, &uart_byte, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	4915      	ldr	r1, [pc, #84]	@ (80008e4 <main+0xec>)
 8000890:	4813      	ldr	r0, [pc, #76]	@ (80008e0 <main+0xe8>)
 8000892:	f002 f83a 	bl	800290a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready) {
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <main+0xf0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0fa      	beq.n	8000896 <main+0x9e>
	    command_ready = 0;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <main+0xf0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]

	    HAL_UART_Transmit(&huart3, (uint8_t*)"CMD: ", 5, HAL_MAX_DELAY);
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008aa:	2205      	movs	r2, #5
 80008ac:	490f      	ldr	r1, [pc, #60]	@ (80008ec <main+0xf4>)
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <main+0xe8>)
 80008b0:	f001 ffa2 	bl	80027f8 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart3, (uint8_t*)command_buffer, RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b8:	2220      	movs	r2, #32
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <main+0xf8>)
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <main+0xe8>)
 80008be:	f001 ff9b 	bl	80027f8 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c6:	2202      	movs	r2, #2
 80008c8:	490a      	ldr	r1, [pc, #40]	@ (80008f4 <main+0xfc>)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <main+0xe8>)
 80008cc:	f001 ff94 	bl	80027f8 <HAL_UART_Transmit>

	    ParseCommand(command_buffer);
 80008d0:	4807      	ldr	r0, [pc, #28]	@ (80008f0 <main+0xf8>)
 80008d2:	f7ff feab 	bl	800062c <ParseCommand>
	  if (command_ready) {
 80008d6:	e7de      	b.n	8000896 <main+0x9e>
 80008d8:	40020400 	.word	0x40020400
 80008dc:	08003f78 	.word	0x08003f78
 80008e0:	20000028 	.word	0x20000028
 80008e4:	200000b0 	.word	0x200000b0
 80008e8:	200000d5 	.word	0x200000d5
 80008ec:	08003f9c 	.word	0x08003f9c
 80008f0:	200000b4 	.word	0x200000b4
 80008f4:	08003fa4 	.word	0x08003fa4

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	@ 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2234      	movs	r2, #52	@ 0x34
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fa9a 	bl	8003e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <SystemClock_Config+0xd8>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a2b      	ldr	r2, [pc, #172]	@ (80009d0 <SystemClock_Config+0xd8>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40
 8000928:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <SystemClock_Config+0xd8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000934:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <SystemClock_Config+0xdc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800093c:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <SystemClock_Config+0xdc>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <SystemClock_Config+0xdc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2310      	movs	r3, #16
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000968:	2360      	movs	r3, #96	@ 0x60
 800096a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fdf1 	bl	8001564 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f890 	bl	8000aac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800098c:	f000 fd9a 	bl	80014c4 <HAL_PWREx_EnableOverDrive>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000996:	f000 f889 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2302      	movs	r3, #2
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2103      	movs	r1, #3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f882 	bl	8001ac0 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009c2:	f000 f873 	bl	8000aac <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3750      	adds	r7, #80	@ 0x50
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <MX_USART3_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_USART3_UART_Init+0x58>)
 8000a1c:	f001 fe9e 	bl	800275c <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f841 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000028 	.word	0x20000028
 8000a34:	40004800 	.word	0x40004800

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0x6c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a14      	ldr	r2, [pc, #80]	@ (8000aa4 <MX_GPIO_Init+0x6c>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_GPIO_Init+0x6c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_GPIO_Init+0x6c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <MX_GPIO_Init+0x6c>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_GPIO_Init+0x6c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_14; // Change to your actual LED pins
 8000a7e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0x70>)
 8000a98:	f000 fb34 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0ae      	sub	sp, #184	@ 0xb8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2290      	movs	r2, #144	@ 0x90
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 f98d 	bl	8003e40 <memset>
  if(huart->Instance==USART3)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a26      	ldr	r2, [pc, #152]	@ (8000bc4 <HAL_UART_MspInit+0xc4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d144      	bne.n	8000bba <HAL_UART_MspInit+0xba>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f9e4 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b4a:	f7ff ffaf 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <HAL_UART_MspInit+0xc8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc8 <HAL_UART_MspInit+0xc8>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <HAL_UART_MspInit+0xc8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_UART_MspInit+0xc8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <HAL_UART_MspInit+0xc8>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_UART_MspInit+0xc8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4809      	ldr	r0, [pc, #36]	@ (8000bcc <HAL_UART_MspInit+0xcc>)
 8000ba6:	f000 faad 	bl	8001104 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2027      	movs	r0, #39	@ 0x27
 8000bb0:	f000 f9df 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bb4:	2027      	movs	r0, #39	@ 0x27
 8000bb6:	f000 f9f8 	bl	8000faa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	37b8      	adds	r7, #184	@ 0xb8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004800 	.word	0x40004800
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020c00 	.word	0x40020c00

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 f885 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <USART3_IRQHandler+0x10>)
 8000c36:	f001 fead 	bl	8002994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000028 	.word	0x20000028

08000c44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f003 f8fb 	bl	8003e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fdad 	bl	80007f8 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cac:	08003fd0 	.word	0x08003fd0
  ldr r2, =_sbss
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cb4:	200000dc 	.word	0x200000dc

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>

08000cba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f94c 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f805 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cca:	f7ff fef5 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f967 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d10:	f000 f92f 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200000d8 	.word	0x200000d8

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200000d8 	.word	0x200000d8

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	05fa0000 	.word	0x05fa0000

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	@ (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff feb6 	bl	8000d5c <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d008      	beq.n	8001010 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e052      	b.n	80010b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0216 	bic.w	r2, r2, #22
 800101e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800102e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <HAL_DMA_Abort+0x62>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0208 	bic.w	r2, r2, #8
 800104e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001060:	e013      	b.n	800108a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001062:	f7ff fe7b 	bl	8000d5c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b05      	cmp	r3, #5
 800106e:	d90c      	bls.n	800108a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e015      	b.n	80010b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e4      	bne.n	8001062 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800109c:	223f      	movs	r2, #63	@ 0x3f
 800109e:	409a      	lsls	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00c      	b.n	80010f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2205      	movs	r2, #5
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e175      	b.n	8001410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8164 	bne.w	800140a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <HAL_GPIO_Init+0x56>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80be 	beq.w	800140a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <HAL_GPIO_Init+0x324>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	4a65      	ldr	r2, [pc, #404]	@ (8001428 <HAL_GPIO_Init+0x324>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001298:	6453      	str	r3, [r2, #68]	@ 0x44
 800129a:	4b63      	ldr	r3, [pc, #396]	@ (8001428 <HAL_GPIO_Init+0x324>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012a6:	4a61      	ldr	r2, [pc, #388]	@ (800142c <HAL_GPIO_Init+0x328>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	@ (8001430 <HAL_GPIO_Init+0x32c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d037      	beq.n	8001342 <HAL_GPIO_Init+0x23e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a57      	ldr	r2, [pc, #348]	@ (8001434 <HAL_GPIO_Init+0x330>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d031      	beq.n	800133e <HAL_GPIO_Init+0x23a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a56      	ldr	r2, [pc, #344]	@ (8001438 <HAL_GPIO_Init+0x334>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d02b      	beq.n	800133a <HAL_GPIO_Init+0x236>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a55      	ldr	r2, [pc, #340]	@ (800143c <HAL_GPIO_Init+0x338>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d025      	beq.n	8001336 <HAL_GPIO_Init+0x232>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a54      	ldr	r2, [pc, #336]	@ (8001440 <HAL_GPIO_Init+0x33c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01f      	beq.n	8001332 <HAL_GPIO_Init+0x22e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a53      	ldr	r2, [pc, #332]	@ (8001444 <HAL_GPIO_Init+0x340>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x22a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a52      	ldr	r2, [pc, #328]	@ (8001448 <HAL_GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x226>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_GPIO_Init+0x348>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a50      	ldr	r2, [pc, #320]	@ (8001450 <HAL_GPIO_Init+0x34c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	@ (8001454 <HAL_GPIO_Init+0x350>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x21a>
 800131a:	2309      	movs	r3, #9
 800131c:	e012      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800131e:	230a      	movs	r3, #10
 8001320:	e010      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001322:	2308      	movs	r3, #8
 8001324:	e00e      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001326:	2307      	movs	r3, #7
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800132a:	2306      	movs	r3, #6
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001354:	4935      	ldr	r1, [pc, #212]	@ (800142c <HAL_GPIO_Init+0x328>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001362:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <HAL_GPIO_Init+0x354>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001386:	4a34      	ldr	r2, [pc, #208]	@ (8001458 <HAL_GPIO_Init+0x354>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138c:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <HAL_GPIO_Init+0x354>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b0:	4a29      	ldr	r2, [pc, #164]	@ (8001458 <HAL_GPIO_Init+0x354>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <HAL_GPIO_Init+0x354>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013da:	4a1f      	ldr	r2, [pc, #124]	@ (8001458 <HAL_GPIO_Init+0x354>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_GPIO_Init+0x354>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001404:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <HAL_GPIO_Init+0x354>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f ae86 	bls.w	8001124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40022000 	.word	0x40022000
 8001454:	40022400 	.word	0x40022400
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	041a      	lsls	r2, r3, #16
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	400b      	ands	r3, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <HAL_PWREx_EnableOverDrive+0x98>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a22      	ldr	r2, [pc, #136]	@ (800155c <HAL_PWREx_EnableOverDrive+0x98>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_PWREx_EnableOverDrive+0x98>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001560 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f2:	f7ff fc33 	bl	8000d5c <HAL_GetTick>
 80014f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f8:	e009      	b.n	800150e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014fa:	f7ff fc2f 	bl	8000d5c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001508:	d901      	bls.n	800150e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e022      	b.n	8001554 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151a:	d1ee      	bne.n	80014fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_PWREx_EnableOverDrive+0x9c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0f      	ldr	r2, [pc, #60]	@ (8001560 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001526:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001528:	f7ff fc18 	bl	8000d5c <HAL_GetTick>
 800152c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152e:	e009      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001530:	f7ff fc14 	bl	8000d5c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800153e:	d901      	bls.n	8001544 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e007      	b.n	8001554 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001550:	d1ee      	bne.n	8001530 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e29b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8087 	beq.w	8001696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001588:	4b96      	ldr	r3, [pc, #600]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b04      	cmp	r3, #4
 8001592:	d00c      	beq.n	80015ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001594:	4b93      	ldr	r3, [pc, #588]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d112      	bne.n	80015c6 <HAL_RCC_OscConfig+0x62>
 80015a0:	4b90      	ldr	r3, [pc, #576]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ac:	d10b      	bne.n	80015c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	4b8d      	ldr	r3, [pc, #564]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d06c      	beq.n	8001694 <HAL_RCC_OscConfig+0x130>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d168      	bne.n	8001694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e275      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x7a>
 80015d0:	4b84      	ldr	r3, [pc, #528]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a83      	ldr	r2, [pc, #524]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	e02e      	b.n	800163c <HAL_RCC_OscConfig+0xd8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x9c>
 80015e6:	4b7f      	ldr	r3, [pc, #508]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7e      	ldr	r2, [pc, #504]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b7c      	ldr	r3, [pc, #496]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7b      	ldr	r2, [pc, #492]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80015f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e01d      	b.n	800163c <HAL_RCC_OscConfig+0xd8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0xc0>
 800160a:	4b76      	ldr	r3, [pc, #472]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a75      	ldr	r2, [pc, #468]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b73      	ldr	r3, [pc, #460]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a72      	ldr	r2, [pc, #456]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0xd8>
 8001624:	4b6f      	ldr	r3, [pc, #444]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a6e      	ldr	r2, [pc, #440]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b6c      	ldr	r3, [pc, #432]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a6b      	ldr	r2, [pc, #428]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb8a 	bl	8000d5c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fb86 	bl	8000d5c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	@ 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e229      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b61      	ldr	r3, [pc, #388]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0xe8>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fb76 	bl	8000d5c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fb72 	bl	8000d5c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	@ 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e215      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x110>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d069      	beq.n	8001776 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a2:	4b50      	ldr	r3, [pc, #320]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b4d      	ldr	r3, [pc, #308]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d11c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x190>
 80016ba:	4b4a      	ldr	r3, [pc, #296]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b47      	ldr	r3, [pc, #284]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x17a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e1e9      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b41      	ldr	r3, [pc, #260]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	493d      	ldr	r1, [pc, #244]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e040      	b.n	8001776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b39      	ldr	r3, [pc, #228]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a38      	ldr	r2, [pc, #224]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb28 	bl	8000d5c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fb24 	bl	8000d5c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1c7      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	4b30      	ldr	r3, [pc, #192]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4929      	ldr	r1, [pc, #164]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
 8001742:	e018      	b.n	8001776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb04 	bl	8000d5c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fb00 	bl	8000d5c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1a3      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d038      	beq.n	80017f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d019      	beq.n	80017be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 800178c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178e:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fae1 	bl	8000d5c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fadd 	bl	8000d5c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e180      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x23a>
 80017bc:	e01a      	b.n	80017f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80017c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c2:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_RCC_OscConfig+0x280>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fac7 	bl	8000d5c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fac3 	bl	8000d5c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d903      	bls.n	80017e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e166      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
 80017e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b92      	ldr	r3, [pc, #584]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a4 	beq.w	800194a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b8c      	ldr	r3, [pc, #560]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b89      	ldr	r3, [pc, #548]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a88      	ldr	r2, [pc, #544]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b86      	ldr	r3, [pc, #536]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b83      	ldr	r3, [pc, #524]	@ (8001a38 <HAL_RCC_OscConfig+0x4d4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001836:	4b80      	ldr	r3, [pc, #512]	@ (8001a38 <HAL_RCC_OscConfig+0x4d4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7f      	ldr	r2, [pc, #508]	@ (8001a38 <HAL_RCC_OscConfig+0x4d4>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fa8b 	bl	8000d5c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fa87 	bl	8000d5c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b64      	cmp	r3, #100	@ 0x64
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e12a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	4b76      	ldr	r3, [pc, #472]	@ (8001a38 <HAL_RCC_OscConfig+0x4d4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x31a>
 8001870:	4b70      	ldr	r3, [pc, #448]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001874:	4a6f      	ldr	r2, [pc, #444]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	@ 0x70
 800187c:	e02d      	b.n	80018da <HAL_RCC_OscConfig+0x376>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x33c>
 8001886:	4b6b      	ldr	r3, [pc, #428]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6713      	str	r3, [r2, #112]	@ 0x70
 8001892:	4b68      	ldr	r3, [pc, #416]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001896:	4a67      	ldr	r2, [pc, #412]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6713      	str	r3, [r2, #112]	@ 0x70
 800189e:	e01c      	b.n	80018da <HAL_RCC_OscConfig+0x376>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d10c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x35e>
 80018a8:	4b62      	ldr	r3, [pc, #392]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ac:	4a61      	ldr	r2, [pc, #388]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c0:	e00b      	b.n	80018da <HAL_RCC_OscConfig+0x376>
 80018c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ce:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d015      	beq.n	800190e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff fa3b 	bl	8000d5c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff fa37 	bl	8000d5c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0d8      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0ee      	beq.n	80018ea <HAL_RCC_OscConfig+0x386>
 800190c:	e014      	b.n	8001938 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fa25 	bl	8000d5c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fa21 	bl	8000d5c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0c2      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ee      	bne.n	8001916 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d105      	bne.n	800194a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a3c      	ldr	r2, [pc, #240]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80ae 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001954:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d06d      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d14b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a31      	ldr	r2, [pc, #196]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 800196e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f9f2 	bl	8000d5c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f9ee 	bl	8000d5c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e091      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	019b      	lsls	r3, r3, #6
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	071b      	lsls	r3, r3, #28
 80019c6:	491b      	ldr	r1, [pc, #108]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f9c0 	bl	8000d5c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f9bc 	bl	8000d5c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e05f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x47c>
 80019fe:	e057      	b.n	8001ab0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9a6 	bl	8000d5c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f9a2 	bl	8000d5c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e045      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_RCC_OscConfig+0x4d0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4b0>
 8001a32:	e03d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x54c>
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <HAL_RCC_OscConfig+0x558>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d030      	beq.n	8001aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d129      	bne.n	8001aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d122      	bne.n	8001aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d119      	bne.n	8001aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d10f      	bne.n	8001aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0d0      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b67      	ldr	r3, [pc, #412]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 020f 	bic.w	r2, r3, #15
 8001aee:	4965      	ldr	r1, [pc, #404]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a58      	ldr	r2, [pc, #352]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d040      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e073      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3d      	ldr	r3, [pc, #244]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e06b      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4936      	ldr	r1, [pc, #216]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb4:	f7ff f8d2 	bl	8000d5c <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff f8ce 	bl	8000d5c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e053      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d210      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	4922      	ldr	r1, [pc, #136]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f821 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490a      	ldr	r1, [pc, #40]	@ (8001c8c <HAL_RCC_ClockConfig+0x1cc>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1d0>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_RCC_ClockConfig+0x1d4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f82e 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08003fa8 	.word	0x08003fa8
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b094      	sub	sp, #80	@ 0x50
 8001c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca8:	2300      	movs	r3, #0
 8001caa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb0:	4b79      	ldr	r3, [pc, #484]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d00d      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	f200 80e1 	bhi.w	8001e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cca:	e0db      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b73      	ldr	r3, [pc, #460]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd0:	e0db      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd2:	4b73      	ldr	r3, [pc, #460]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd6:	e0d8      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	f04f 0000 	mov.w	r0, #0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	0159      	lsls	r1, r3, #5
 8001d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1c:	0150      	lsls	r0, r2, #5
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4621      	mov	r1, r4
 8001d24:	1a51      	subs	r1, r2, r1
 8001d26:	6139      	str	r1, [r7, #16]
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	018b      	lsls	r3, r1, #6
 8001d40:	4651      	mov	r1, sl
 8001d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d46:	4651      	mov	r1, sl
 8001d48:	018a      	lsls	r2, r1, #6
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d50:	4659      	mov	r1, fp
 8001d52:	eb63 0901 	sbc.w	r9, r3, r1
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6a:	4690      	mov	r8, r2
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	eb18 0303 	adds.w	r3, r8, r3
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	462b      	mov	r3, r5
 8001d78:	eb49 0303 	adc.w	r3, r9, r3
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	024b      	lsls	r3, r1, #9
 8001d8e:	4621      	mov	r1, r4
 8001d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d94:	4621      	mov	r1, r4
 8001d96:	024a      	lsls	r2, r1, #9
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da8:	f7fe fa58 	bl	800025c <__aeabi_uldivmod>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4613      	mov	r3, r2
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db4:	e058      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0159      	lsls	r1, r3, #5
 8001dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de2:	0150      	lsls	r0, r2, #5
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4641      	mov	r1, r8
 8001dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dee:	4649      	mov	r1, r9
 8001df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e08:	ebb2 040a 	subs.w	r4, r2, sl
 8001e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	00eb      	lsls	r3, r5, #3
 8001e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1e:	00e2      	lsls	r2, r4, #3
 8001e20:	4614      	mov	r4, r2
 8001e22:	461d      	mov	r5, r3
 8001e24:	4643      	mov	r3, r8
 8001e26:	18e3      	adds	r3, r4, r3
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	eb45 0303 	adc.w	r3, r5, r3
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3e:	4629      	mov	r1, r5
 8001e40:	028b      	lsls	r3, r1, #10
 8001e42:	4621      	mov	r1, r4
 8001e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e48:	4621      	mov	r1, r4
 8001e4a:	028a      	lsls	r2, r1, #10
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e52:	2200      	movs	r2, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	61fa      	str	r2, [r7, #28]
 8001e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e5c:	f7fe f9fe 	bl	800025c <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3750      	adds	r7, #80	@ 0x50
 8001e90:	46bd      	mov	sp, r7
 8001e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	@ (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08003fb8 	.word	0x08003fb8

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee8:	f7ff ffdc 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0b5b      	lsrs	r3, r3, #13
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	@ (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	08003fb8 	.word	0x08003fb8

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d012      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f34:	4b69      	ldr	r3, [pc, #420]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a68      	ldr	r2, [pc, #416]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f3e:	6093      	str	r3, [r2, #8]
 8001f40:	4b66      	ldr	r3, [pc, #408]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f48:	4964      	ldr	r1, [pc, #400]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d017      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f66:	4b5d      	ldr	r3, [pc, #372]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	4959      	ldr	r1, [pc, #356]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f84:	d101      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d017      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	494a      	ldr	r1, [pc, #296]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 808b 	beq.w	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	4a39      	ldr	r2, [pc, #228]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffc:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002008:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002014:	f7fe fea2 	bl	8000d5c <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe fe9e 	bl	8000d5c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	@ 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e38f      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800202e:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800203a:	4b28      	ldr	r3, [pc, #160]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002042:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d035      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d02e      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002058:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002060:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800206e:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a1a      	ldr	r2, [pc, #104]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800207a:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d114      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fe66 	bl	8000d5c <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	e00a      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7fe fe62 	bl	8000d5c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e351      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ee      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020c2:	d111      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020d2:	400b      	ands	r3, r1
 80020d4:	4901      	ldr	r1, [pc, #4]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
 80020da:	e00b      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000
 80020e4:	0ffffcff 	.word	0x0ffffcff
 80020e8:	4bac      	ldr	r3, [pc, #688]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4aab      	ldr	r2, [pc, #684]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80020f2:	6093      	str	r3, [r2, #8]
 80020f4:	4ba9      	ldr	r3, [pc, #676]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	49a6      	ldr	r1, [pc, #664]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	4313      	orrs	r3, r2
 8002104:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002112:	4ba2      	ldr	r3, [pc, #648]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002118:	4aa0      	ldr	r2, [pc, #640]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800211e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002122:	4b9e      	ldr	r3, [pc, #632]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212c:	499b      	ldr	r1, [pc, #620]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002140:	4b96      	ldr	r3, [pc, #600]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800214e:	4993      	ldr	r1, [pc, #588]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002162:	4b8e      	ldr	r3, [pc, #568]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002170:	498a      	ldr	r1, [pc, #552]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002184:	4b85      	ldr	r3, [pc, #532]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002192:	4982      	ldr	r1, [pc, #520]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021a6:	4b7d      	ldr	r3, [pc, #500]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4979      	ldr	r1, [pc, #484]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c8:	4b74      	ldr	r3, [pc, #464]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	4971      	ldr	r1, [pc, #452]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ea:	4b6c      	ldr	r3, [pc, #432]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f023 020c 	bic.w	r2, r3, #12
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f8:	4968      	ldr	r1, [pc, #416]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800220c:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002212:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4960      	ldr	r1, [pc, #384]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800222e:	4b5b      	ldr	r3, [pc, #364]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002234:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223c:	4957      	ldr	r1, [pc, #348]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002250:	4b52      	ldr	r3, [pc, #328]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	494f      	ldr	r1, [pc, #316]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002272:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002278:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4946      	ldr	r1, [pc, #280]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002294:	4b41      	ldr	r3, [pc, #260]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	493e      	ldr	r1, [pc, #248]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022b6:	4b39      	ldr	r3, [pc, #228]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c4:	4935      	ldr	r1, [pc, #212]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022e6:	492d      	ldr	r1, [pc, #180]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022fa:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002308:	4924      	ldr	r1, [pc, #144]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002318:	d101      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800231a:	2301      	movs	r3, #1
 800231c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002340:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	4914      	ldr	r1, [pc, #80]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800235c:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002362:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236c:	490b      	ldr	r1, [pc, #44]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00f      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002390:	4902      	ldr	r1, [pc, #8]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002398:	e002      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ac:	4b8a      	ldr	r3, [pc, #552]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023bc:	4986      	ldr	r1, [pc, #536]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00b      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023d0:	4b81      	ldr	r3, [pc, #516]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e0:	497d      	ldr	r1, [pc, #500]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d006      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80d6 	beq.w	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023fc:	4b76      	ldr	r3, [pc, #472]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a75      	ldr	r2, [pc, #468]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002408:	f7fe fca8 	bl	8000d5c <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002410:	f7fe fca4 	bl	8000d5c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	@ 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e195      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d021      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11d      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002442:	4b65      	ldr	r3, [pc, #404]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002450:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	019a      	lsls	r2, r3, #6
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	431a      	orrs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	4958      	ldr	r1, [pc, #352]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800249c:	2b00      	cmp	r3, #0
 800249e:	d02e      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a8:	d129      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024aa:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024b8:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024be:	0f1b      	lsrs	r3, r3, #28
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	019a      	lsls	r2, r3, #6
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	431a      	orrs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	071b      	lsls	r3, r3, #28
 80024de:	493e      	ldr	r1, [pc, #248]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024e6:	4b3c      	ldr	r3, [pc, #240]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	f023 021f 	bic.w	r2, r3, #31
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4938      	ldr	r1, [pc, #224]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01d      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800250a:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002510:	0e1b      	lsrs	r3, r3, #24
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002518:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251e:	0f1b      	lsrs	r3, r3, #28
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	019a      	lsls	r2, r3, #6
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	071b      	lsls	r3, r3, #28
 800253e:	4926      	ldr	r1, [pc, #152]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d011      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	019a      	lsls	r2, r3, #6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	071b      	lsls	r3, r3, #28
 800256e:	491a      	ldr	r1, [pc, #104]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002576:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002582:	f7fe fbeb 	bl	8000d5c <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800258a:	f7fe fbe7 	bl	8000d5c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	@ 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0d8      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800259c:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 80ce 	bne.w	800274c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025b0:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a08      	ldr	r2, [pc, #32]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe fbce 	bl	8000d5c <HAL_GetTick>
 80025c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025c2:	e00b      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c4:	f7fe fbca 	bl	8000d5c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d904      	bls.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0bb      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e8:	d0ec      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02e      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12a      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002612:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002620:	4b4d      	ldr	r3, [pc, #308]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	0f1b      	lsrs	r3, r3, #28
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	019a      	lsls	r2, r3, #6
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	071b      	lsls	r3, r3, #28
 8002646:	4944      	ldr	r1, [pc, #272]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	493d      	ldr	r1, [pc, #244]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d022      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800267c:	d11d      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	0e1b      	lsrs	r3, r3, #24
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800268c:	4b32      	ldr	r3, [pc, #200]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	0f1b      	lsrs	r3, r3, #28
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	4929      	ldr	r1, [pc, #164]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026c6:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026d4:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	4917      	ldr	r1, [pc, #92]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002708:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	4911      	ldr	r1, [pc, #68]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0e      	ldr	r2, [pc, #56]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002724:	f7fe fb1a 	bl	8000d5c <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800272c:	f7fe fb16 	bl	8000d5c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	@ 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e007      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800274a:	d1ef      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e040      	b.n	80027f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f9be 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	@ 0x24
 8002788:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fe86 	bl	80034b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fc1f 	bl	8002fec <UART_SetConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01b      	b.n	80027f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 ff05 	bl	80035f8 <UART_CheckIdleState>
 80027ee:	4603      	mov	r3, r0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800280c:	2b20      	cmp	r3, #32
 800280e:	d177      	bne.n	8002900 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_UART_Transmit+0x24>
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e070      	b.n	8002902 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2221      	movs	r2, #33	@ 0x21
 800282c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282e:	f7fe fa95 	bl	8000d5c <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284c:	d108      	bne.n	8002860 <HAL_UART_Transmit+0x68>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e003      	b.n	8002868 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002868:	e02f      	b.n	80028ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	@ 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 ff67 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e03b      	b.n	8002902 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	3302      	adds	r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e007      	b.n	80028b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1c9      	bne.n	800286a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	2140      	movs	r1, #64	@ 0x40
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 ff31 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e005      	b.n	8002902 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b08a      	sub	sp, #40	@ 0x28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	4613      	mov	r3, r2
 8002916:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291e:	2b20      	cmp	r3, #32
 8002920:	d132      	bne.n	8002988 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_UART_Receive_IT+0x24>
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02b      	b.n	800298a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d018      	beq.n	8002978 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	613b      	str	r3, [r7, #16]
   return(result);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	69f9      	ldr	r1, [r7, #28]
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	e841 2300 	strex	r3, r2, [r1]
 8002970:	61bb      	str	r3, [r7, #24]
   return(result);
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e6      	bne.n	8002946 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	461a      	mov	r2, r3
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 ff50 	bl	8003824 <UART_Start_Receive_IT>
 8002984:	4603      	mov	r3, r0
 8002986:	e000      	b.n	800298a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3728      	adds	r7, #40	@ 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b0ba      	sub	sp, #232	@ 0xe8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80029be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80029c2:	4013      	ands	r3, r2
 80029c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80029c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d115      	bne.n	80029fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00f      	beq.n	80029fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d009      	beq.n	80029fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 82c6 	beq.w	8002f7e <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
      }
      return;
 80029fa:	e2c0      	b.n	8002f7e <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8117 	beq.w	8002c34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a16:	4b85      	ldr	r3, [pc, #532]	@ (8002c2c <HAL_UART_IRQHandler+0x298>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 810a 	beq.w	8002c34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_UART_IRQHandler+0xbc>
 8002a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d011      	beq.n	8002a80 <HAL_UART_IRQHandler+0xec>
 8002a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a76:	f043 0204 	orr.w	r2, r3, #4
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d011      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x11c>
 8002a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa6:	f043 0202 	orr.w	r2, r3, #2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d017      	beq.n	8002aec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002acc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2208      	movs	r2, #8
 8002ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae2:	f043 0208 	orr.w	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <HAL_UART_IRQHandler+0x18a>
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 822c 	beq.w	8002f82 <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	2b40      	cmp	r3, #64	@ 0x40
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04f      	beq.n	8002c16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 ff1a 	bl	80039b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b86:	2b40      	cmp	r3, #64	@ 0x40
 8002b88:	d141      	bne.n	8002c0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3308      	adds	r3, #8
 8002b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1d9      	bne.n	8002b8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d013      	beq.n	8002c06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <HAL_UART_IRQHandler+0x29c>)
 8002be4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fa67 	bl	80010be <HAL_DMA_Abort_IT>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d017      	beq.n	8002c26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c00:	4610      	mov	r0, r2
 8002c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	e00f      	b.n	8002c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9d0 	bl	8002fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	e00b      	b.n	8002c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f9cc 	bl	8002fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	e007      	b.n	8002c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f9c8 	bl	8002fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002c24:	e1ad      	b.n	8002f82 <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c26:	bf00      	nop
    return;
 8002c28:	e1ab      	b.n	8002f82 <HAL_UART_IRQHandler+0x5ee>
 8002c2a:	bf00      	nop
 8002c2c:	04000120 	.word	0x04000120
 8002c30:	08003a79 	.word	0x08003a79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 8166 	bne.w	8002f0a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 815f 	beq.w	8002f0a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8158 	beq.w	8002f0a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	f040 80d0 	bne.w	8002e12 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80ab 	beq.w	8002dde <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f080 80a3 	bcs.w	8002dde <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cac:	f000 8086 	beq.w	8002dbc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cea:	e841 2300 	strex	r3, r2, [r1]
 8002cee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1da      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e1      	bne.n	8002cfa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3308      	adds	r3, #8
 8002d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e3      	bne.n	8002d36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d8c:	f023 0310 	bic.w	r3, r3, #16
 8002d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002da0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e4      	bne.n	8002d7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe f911 	bl	8000fde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8f2 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ddc:	e0d3      	b.n	8002f86 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002de4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 80cc 	bne.w	8002f86 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df8:	f040 80c5 	bne.w	8002f86 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8d8 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
      return;
 8002e10:	e0b9      	b.n	8002f86 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80ab 	beq.w	8002f8a <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8002e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a6 	beq.w	8002f8a <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e4      	bne.n	8002e3e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3308      	adds	r3, #8
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	623b      	str	r3, [r7, #32]
   return(result);
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3308      	adds	r3, #8
 8002e94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e98:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea0:	e841 2300 	strex	r3, r2, [r1]
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e3      	bne.n	8002e74 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0310 	bic.w	r3, r3, #16
 8002ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	617b      	str	r3, [r7, #20]
   return(result);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e4      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f85c 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f08:	e03f      	b.n	8002f8a <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <HAL_UART_IRQHandler+0x5a0>
 8002f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f853 	bl	8002fd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f32:	e02d      	b.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01c      	beq.n	8002f8e <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
    }
    return;
 8002f5c:	e017      	b.n	8002f8e <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
 8002f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00c      	beq.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fd90 	bl	8003a9c <UART_EndTransmit_IT>
    return;
 8002f7c:	e008      	b.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002f7e:	bf00      	nop
 8002f80:	e006      	b.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002f82:	bf00      	nop
 8002f84:	e004      	b.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002f8e:	bf00      	nop
  }

}
 8002f90:	37e8      	adds	r7, #232	@ 0xe8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop

08002f98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4ba6      	ldr	r3, [pc, #664]	@ (80032b0 <UART_SetConfig+0x2c4>)
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	6979      	ldr	r1, [r7, #20]
 8003020:	430b      	orrs	r3, r1
 8003022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a94      	ldr	r2, [pc, #592]	@ (80032b4 <UART_SetConfig+0x2c8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d120      	bne.n	80030aa <UART_SetConfig+0xbe>
 8003068:	4b93      	ldr	r3, [pc, #588]	@ (80032b8 <UART_SetConfig+0x2cc>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b03      	cmp	r3, #3
 8003074:	d816      	bhi.n	80030a4 <UART_SetConfig+0xb8>
 8003076:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <UART_SetConfig+0x90>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800308d 	.word	0x0800308d
 8003080:	08003099 	.word	0x08003099
 8003084:	08003093 	.word	0x08003093
 8003088:	0800309f 	.word	0x0800309f
 800308c:	2301      	movs	r3, #1
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e150      	b.n	8003334 <UART_SetConfig+0x348>
 8003092:	2302      	movs	r3, #2
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e14d      	b.n	8003334 <UART_SetConfig+0x348>
 8003098:	2304      	movs	r3, #4
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e14a      	b.n	8003334 <UART_SetConfig+0x348>
 800309e:	2308      	movs	r3, #8
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e147      	b.n	8003334 <UART_SetConfig+0x348>
 80030a4:	2310      	movs	r3, #16
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e144      	b.n	8003334 <UART_SetConfig+0x348>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a83      	ldr	r2, [pc, #524]	@ (80032bc <UART_SetConfig+0x2d0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d132      	bne.n	800311a <UART_SetConfig+0x12e>
 80030b4:	4b80      	ldr	r3, [pc, #512]	@ (80032b8 <UART_SetConfig+0x2cc>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d828      	bhi.n	8003114 <UART_SetConfig+0x128>
 80030c2:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <UART_SetConfig+0xdc>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	08003115 	.word	0x08003115
 80030d0:	08003115 	.word	0x08003115
 80030d4:	08003115 	.word	0x08003115
 80030d8:	08003109 	.word	0x08003109
 80030dc:	08003115 	.word	0x08003115
 80030e0:	08003115 	.word	0x08003115
 80030e4:	08003115 	.word	0x08003115
 80030e8:	08003103 	.word	0x08003103
 80030ec:	08003115 	.word	0x08003115
 80030f0:	08003115 	.word	0x08003115
 80030f4:	08003115 	.word	0x08003115
 80030f8:	0800310f 	.word	0x0800310f
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e118      	b.n	8003334 <UART_SetConfig+0x348>
 8003102:	2302      	movs	r3, #2
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e115      	b.n	8003334 <UART_SetConfig+0x348>
 8003108:	2304      	movs	r3, #4
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e112      	b.n	8003334 <UART_SetConfig+0x348>
 800310e:	2308      	movs	r3, #8
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e10f      	b.n	8003334 <UART_SetConfig+0x348>
 8003114:	2310      	movs	r3, #16
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e10c      	b.n	8003334 <UART_SetConfig+0x348>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a68      	ldr	r2, [pc, #416]	@ (80032c0 <UART_SetConfig+0x2d4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d120      	bne.n	8003166 <UART_SetConfig+0x17a>
 8003124:	4b64      	ldr	r3, [pc, #400]	@ (80032b8 <UART_SetConfig+0x2cc>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800312e:	2b30      	cmp	r3, #48	@ 0x30
 8003130:	d013      	beq.n	800315a <UART_SetConfig+0x16e>
 8003132:	2b30      	cmp	r3, #48	@ 0x30
 8003134:	d814      	bhi.n	8003160 <UART_SetConfig+0x174>
 8003136:	2b20      	cmp	r3, #32
 8003138:	d009      	beq.n	800314e <UART_SetConfig+0x162>
 800313a:	2b20      	cmp	r3, #32
 800313c:	d810      	bhi.n	8003160 <UART_SetConfig+0x174>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <UART_SetConfig+0x15c>
 8003142:	2b10      	cmp	r3, #16
 8003144:	d006      	beq.n	8003154 <UART_SetConfig+0x168>
 8003146:	e00b      	b.n	8003160 <UART_SetConfig+0x174>
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e0f2      	b.n	8003334 <UART_SetConfig+0x348>
 800314e:	2302      	movs	r3, #2
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e0ef      	b.n	8003334 <UART_SetConfig+0x348>
 8003154:	2304      	movs	r3, #4
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e0ec      	b.n	8003334 <UART_SetConfig+0x348>
 800315a:	2308      	movs	r3, #8
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e0e9      	b.n	8003334 <UART_SetConfig+0x348>
 8003160:	2310      	movs	r3, #16
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e0e6      	b.n	8003334 <UART_SetConfig+0x348>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a56      	ldr	r2, [pc, #344]	@ (80032c4 <UART_SetConfig+0x2d8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d120      	bne.n	80031b2 <UART_SetConfig+0x1c6>
 8003170:	4b51      	ldr	r3, [pc, #324]	@ (80032b8 <UART_SetConfig+0x2cc>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800317a:	2bc0      	cmp	r3, #192	@ 0xc0
 800317c:	d013      	beq.n	80031a6 <UART_SetConfig+0x1ba>
 800317e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003180:	d814      	bhi.n	80031ac <UART_SetConfig+0x1c0>
 8003182:	2b80      	cmp	r3, #128	@ 0x80
 8003184:	d009      	beq.n	800319a <UART_SetConfig+0x1ae>
 8003186:	2b80      	cmp	r3, #128	@ 0x80
 8003188:	d810      	bhi.n	80031ac <UART_SetConfig+0x1c0>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <UART_SetConfig+0x1a8>
 800318e:	2b40      	cmp	r3, #64	@ 0x40
 8003190:	d006      	beq.n	80031a0 <UART_SetConfig+0x1b4>
 8003192:	e00b      	b.n	80031ac <UART_SetConfig+0x1c0>
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e0cc      	b.n	8003334 <UART_SetConfig+0x348>
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e0c9      	b.n	8003334 <UART_SetConfig+0x348>
 80031a0:	2304      	movs	r3, #4
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e0c6      	b.n	8003334 <UART_SetConfig+0x348>
 80031a6:	2308      	movs	r3, #8
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e0c3      	b.n	8003334 <UART_SetConfig+0x348>
 80031ac:	2310      	movs	r3, #16
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e0c0      	b.n	8003334 <UART_SetConfig+0x348>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a44      	ldr	r2, [pc, #272]	@ (80032c8 <UART_SetConfig+0x2dc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d125      	bne.n	8003208 <UART_SetConfig+0x21c>
 80031bc:	4b3e      	ldr	r3, [pc, #248]	@ (80032b8 <UART_SetConfig+0x2cc>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ca:	d017      	beq.n	80031fc <UART_SetConfig+0x210>
 80031cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d0:	d817      	bhi.n	8003202 <UART_SetConfig+0x216>
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d6:	d00b      	beq.n	80031f0 <UART_SetConfig+0x204>
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031dc:	d811      	bhi.n	8003202 <UART_SetConfig+0x216>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <UART_SetConfig+0x1fe>
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e6:	d006      	beq.n	80031f6 <UART_SetConfig+0x20a>
 80031e8:	e00b      	b.n	8003202 <UART_SetConfig+0x216>
 80031ea:	2300      	movs	r3, #0
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e0a1      	b.n	8003334 <UART_SetConfig+0x348>
 80031f0:	2302      	movs	r3, #2
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e09e      	b.n	8003334 <UART_SetConfig+0x348>
 80031f6:	2304      	movs	r3, #4
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e09b      	b.n	8003334 <UART_SetConfig+0x348>
 80031fc:	2308      	movs	r3, #8
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e098      	b.n	8003334 <UART_SetConfig+0x348>
 8003202:	2310      	movs	r3, #16
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e095      	b.n	8003334 <UART_SetConfig+0x348>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <UART_SetConfig+0x2e0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d125      	bne.n	800325e <UART_SetConfig+0x272>
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <UART_SetConfig+0x2cc>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003218:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800321c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003220:	d017      	beq.n	8003252 <UART_SetConfig+0x266>
 8003222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003226:	d817      	bhi.n	8003258 <UART_SetConfig+0x26c>
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322c:	d00b      	beq.n	8003246 <UART_SetConfig+0x25a>
 800322e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003232:	d811      	bhi.n	8003258 <UART_SetConfig+0x26c>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <UART_SetConfig+0x254>
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323c:	d006      	beq.n	800324c <UART_SetConfig+0x260>
 800323e:	e00b      	b.n	8003258 <UART_SetConfig+0x26c>
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e076      	b.n	8003334 <UART_SetConfig+0x348>
 8003246:	2302      	movs	r3, #2
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e073      	b.n	8003334 <UART_SetConfig+0x348>
 800324c:	2304      	movs	r3, #4
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e070      	b.n	8003334 <UART_SetConfig+0x348>
 8003252:	2308      	movs	r3, #8
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e06d      	b.n	8003334 <UART_SetConfig+0x348>
 8003258:	2310      	movs	r3, #16
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e06a      	b.n	8003334 <UART_SetConfig+0x348>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <UART_SetConfig+0x2e4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d138      	bne.n	80032da <UART_SetConfig+0x2ee>
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <UART_SetConfig+0x2cc>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003272:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003276:	d017      	beq.n	80032a8 <UART_SetConfig+0x2bc>
 8003278:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800327c:	d82a      	bhi.n	80032d4 <UART_SetConfig+0x2e8>
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003282:	d00b      	beq.n	800329c <UART_SetConfig+0x2b0>
 8003284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003288:	d824      	bhi.n	80032d4 <UART_SetConfig+0x2e8>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <UART_SetConfig+0x2aa>
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d006      	beq.n	80032a2 <UART_SetConfig+0x2b6>
 8003294:	e01e      	b.n	80032d4 <UART_SetConfig+0x2e8>
 8003296:	2300      	movs	r3, #0
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e04b      	b.n	8003334 <UART_SetConfig+0x348>
 800329c:	2302      	movs	r3, #2
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e048      	b.n	8003334 <UART_SetConfig+0x348>
 80032a2:	2304      	movs	r3, #4
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e045      	b.n	8003334 <UART_SetConfig+0x348>
 80032a8:	2308      	movs	r3, #8
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e042      	b.n	8003334 <UART_SetConfig+0x348>
 80032ae:	bf00      	nop
 80032b0:	efff69f3 	.word	0xefff69f3
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40004400 	.word	0x40004400
 80032c0:	40004800 	.word	0x40004800
 80032c4:	40004c00 	.word	0x40004c00
 80032c8:	40005000 	.word	0x40005000
 80032cc:	40011400 	.word	0x40011400
 80032d0:	40007800 	.word	0x40007800
 80032d4:	2310      	movs	r3, #16
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e02c      	b.n	8003334 <UART_SetConfig+0x348>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a72      	ldr	r2, [pc, #456]	@ (80034a8 <UART_SetConfig+0x4bc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <UART_SetConfig+0x344>
 80032e4:	4b71      	ldr	r3, [pc, #452]	@ (80034ac <UART_SetConfig+0x4c0>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032f2:	d017      	beq.n	8003324 <UART_SetConfig+0x338>
 80032f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032f8:	d817      	bhi.n	800332a <UART_SetConfig+0x33e>
 80032fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032fe:	d00b      	beq.n	8003318 <UART_SetConfig+0x32c>
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003304:	d811      	bhi.n	800332a <UART_SetConfig+0x33e>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <UART_SetConfig+0x326>
 800330a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800330e:	d006      	beq.n	800331e <UART_SetConfig+0x332>
 8003310:	e00b      	b.n	800332a <UART_SetConfig+0x33e>
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e00d      	b.n	8003334 <UART_SetConfig+0x348>
 8003318:	2302      	movs	r3, #2
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e00a      	b.n	8003334 <UART_SetConfig+0x348>
 800331e:	2304      	movs	r3, #4
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e007      	b.n	8003334 <UART_SetConfig+0x348>
 8003324:	2308      	movs	r3, #8
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e004      	b.n	8003334 <UART_SetConfig+0x348>
 800332a:	2310      	movs	r3, #16
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e001      	b.n	8003334 <UART_SetConfig+0x348>
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333c:	d15b      	bne.n	80033f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d828      	bhi.n	8003396 <UART_SetConfig+0x3aa>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <UART_SetConfig+0x360>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fda4 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8003374:	61b8      	str	r0, [r7, #24]
        break;
 8003376:	e013      	b.n	80033a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fdb4 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 800337c:	61b8      	str	r0, [r7, #24]
        break;
 800337e:	e00f      	b.n	80033a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b4b      	ldr	r3, [pc, #300]	@ (80034b0 <UART_SetConfig+0x4c4>)
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e00c      	b.n	80033a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fc87 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 800338a:	61b8      	str	r0, [r7, #24]
        break;
 800338c:	e008      	b.n	80033a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77bb      	strb	r3, [r7, #30]
        break;
 800339e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d074      	beq.n	8003490 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	005a      	lsls	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	441a      	add	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d916      	bls.n	80033f0 <UART_SetConfig+0x404>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c8:	d212      	bcs.n	80033f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f023 030f 	bic.w	r3, r3, #15
 80033d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	b29a      	uxth	r2, r3
 80033e0:	89fb      	ldrh	r3, [r7, #14]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	89fa      	ldrh	r2, [r7, #14]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e04f      	b.n	8003490 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77bb      	strb	r3, [r7, #30]
 80033f4:	e04c      	b.n	8003490 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d828      	bhi.n	800344e <UART_SetConfig+0x462>
 80033fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0x418>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003429 	.word	0x08003429
 8003408:	08003431 	.word	0x08003431
 800340c:	08003439 	.word	0x08003439
 8003410:	0800344f 	.word	0x0800344f
 8003414:	0800343f 	.word	0x0800343f
 8003418:	0800344f 	.word	0x0800344f
 800341c:	0800344f 	.word	0x0800344f
 8003420:	0800344f 	.word	0x0800344f
 8003424:	08003447 	.word	0x08003447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7fe fd48 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 800342c:	61b8      	str	r0, [r7, #24]
        break;
 800342e:	e013      	b.n	8003458 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7fe fd58 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8003434:	61b8      	str	r0, [r7, #24]
        break;
 8003436:	e00f      	b.n	8003458 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <UART_SetConfig+0x4c4>)
 800343a:	61bb      	str	r3, [r7, #24]
        break;
 800343c:	e00c      	b.n	8003458 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343e:	f7fe fc2b 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8003442:	61b8      	str	r0, [r7, #24]
        break;
 8003444:	e008      	b.n	8003458 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800344a:	61bb      	str	r3, [r7, #24]
        break;
 800344c:	e004      	b.n	8003458 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77bb      	strb	r3, [r7, #30]
        break;
 8003456:	bf00      	nop
    }

    if (pclk != 0U)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d018      	beq.n	8003490 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	085a      	lsrs	r2, r3, #1
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	441a      	add	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b0f      	cmp	r3, #15
 8003476:	d909      	bls.n	800348c <UART_SetConfig+0x4a0>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347e:	d205      	bcs.n	800348c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e001      	b.n	8003490 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800349c:	7fbb      	ldrb	r3, [r7, #30]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40007c00 	.word	0x40007c00
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400

080034b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035b2:	d10a      	bne.n	80035ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b098      	sub	sp, #96	@ 0x60
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003608:	f7fd fba8 	bl	8000d5c <HAL_GetTick>
 800360c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b08      	cmp	r3, #8
 800361a:	d12e      	bne.n	800367a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	2200      	movs	r2, #0
 8003626:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f88c 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d021      	beq.n	800367a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800364a:	653b      	str	r3, [r7, #80]	@ 0x50
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
 8003656:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800365a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e062      	b.n	8003740 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d149      	bne.n	800371c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f856 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d03c      	beq.n	800371c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	623b      	str	r3, [r7, #32]
   return(result);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e6      	bne.n	80036a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036f4:	61fa      	str	r2, [r7, #28]
 80036f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	617b      	str	r3, [r7, #20]
   return(result);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e011      	b.n	8003740 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3758      	adds	r7, #88	@ 0x58
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003758:	e04f      	b.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003760:	d04b      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003762:	f7fd fafb 	bl	8000d5c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <UART_WaitOnFlagUntilTimeout+0x30>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e04e      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d037      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b80      	cmp	r3, #128	@ 0x80
 800378e:	d034      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b40      	cmp	r3, #64	@ 0x40
 8003794:	d031      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d110      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8ff 	bl	80039b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2208      	movs	r2, #8
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e029      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d4:	d111      	bne.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f8e5 	bl	80039b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e00f      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	429a      	cmp	r2, r3
 8003816:	d0a0      	beq.n	800375a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003824:	b480      	push	{r7}
 8003826:	b097      	sub	sp, #92	@ 0x5c
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003856:	d10e      	bne.n	8003876 <UART_Start_Receive_IT+0x52>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <UART_Start_Receive_IT+0x48>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003866:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800386a:	e02d      	b.n	80038c8 <UART_Start_Receive_IT+0xa4>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	22ff      	movs	r2, #255	@ 0xff
 8003870:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003874:	e028      	b.n	80038c8 <UART_Start_Receive_IT+0xa4>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <UART_Start_Receive_IT+0x76>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <UART_Start_Receive_IT+0x6c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	22ff      	movs	r2, #255	@ 0xff
 800388a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800388e:	e01b      	b.n	80038c8 <UART_Start_Receive_IT+0xa4>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	227f      	movs	r2, #127	@ 0x7f
 8003894:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003898:	e016      	b.n	80038c8 <UART_Start_Receive_IT+0xa4>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038a2:	d10d      	bne.n	80038c0 <UART_Start_Receive_IT+0x9c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <UART_Start_Receive_IT+0x92>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	227f      	movs	r2, #127	@ 0x7f
 80038b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038b4:	e008      	b.n	80038c8 <UART_Start_Receive_IT+0xa4>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	223f      	movs	r2, #63	@ 0x3f
 80038ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038be:	e003      	b.n	80038c8 <UART_Start_Receive_IT+0xa4>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2222      	movs	r2, #34	@ 0x22
 80038d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003914:	d107      	bne.n	8003926 <UART_Start_Receive_IT+0x102>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a21      	ldr	r2, [pc, #132]	@ (80039a8 <UART_Start_Receive_IT+0x184>)
 8003922:	669a      	str	r2, [r3, #104]	@ 0x68
 8003924:	e002      	b.n	800392c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a20      	ldr	r2, [pc, #128]	@ (80039ac <UART_Start_Receive_IT+0x188>)
 800392a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d019      	beq.n	8003968 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34
 8003954:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e6      	bne.n	8003934 <UART_Start_Receive_IT+0x110>
 8003966:	e018      	b.n	800399a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	653b      	str	r3, [r7, #80]	@ 0x50
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	69f9      	ldr	r1, [r7, #28]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	61bb      	str	r3, [r7, #24]
   return(result);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e6      	bne.n	8003968 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	375c      	adds	r7, #92	@ 0x5c
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	08003c99 	.word	0x08003c99
 80039ac:	08003af1 	.word	0x08003af1

080039b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b095      	sub	sp, #84	@ 0x54
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d118      	bne.n	8003a58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f023 0310 	bic.w	r3, r3, #16
 8003a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	613b      	str	r3, [r7, #16]
   return(result);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a6c:	bf00      	nop
 8003a6e:	3754      	adds	r7, #84	@ 0x54
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff fa8c 	bl	8002fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e6      	bne.n	8003aa4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fa58 	bl	8002f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ae8:	bf00      	nop
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b09c      	sub	sp, #112	@ 0x70
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003afe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b08:	2b22      	cmp	r3, #34	@ 0x22
 8003b0a:	f040 80b9 	bne.w	8003c80 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003b1c:	b2d9      	uxtb	r1, r3
 8003b1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b28:	400a      	ands	r2, r1
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 809c 	bne.w	8003c90 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e6      	bne.n	8003b58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e5      	bne.n	8003b8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d018      	beq.n	8003c12 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	623b      	str	r3, [r7, #32]
   return(result);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e6      	bne.n	8003be0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d12e      	bne.n	8003c78 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d103      	bne.n	8003c68 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff f9a5 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c76:	e00b      	b.n	8003c90 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fc fc85 	bl	8000588 <HAL_UART_RxCpltCallback>
}
 8003c7e:	e007      	b.n	8003c90 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	619a      	str	r2, [r3, #24]
}
 8003c90:	bf00      	nop
 8003c92:	3770      	adds	r7, #112	@ 0x70
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b09c      	sub	sp, #112	@ 0x70
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ca6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb0:	2b22      	cmp	r3, #34	@ 0x22
 8003cb2:	f040 80b9 	bne.w	8003e28 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003cca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 809c 	bne.w	8003e38 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d018      	beq.n	8003dba <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e6      	bne.n	8003d88 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d12e      	bne.n	8003e20 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f023 0310 	bic.w	r3, r3, #16
 8003ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	613b      	str	r3, [r7, #16]
   return(result);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d103      	bne.n	8003e10 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff f8d1 	bl	8002fc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e1e:	e00b      	b.n	8003e38 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fc fbb1 	bl	8000588 <HAL_UART_RxCpltCallback>
}
 8003e26:	e007      	b.n	8003e38 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0208 	orr.w	r2, r2, #8
 8003e36:	619a      	str	r2, [r3, #24]
}
 8003e38:	bf00      	nop
 8003e3a:	3770      	adds	r7, #112	@ 0x70
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <memset>:
 8003e40:	4402      	add	r2, r0
 8003e42:	4603      	mov	r3, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <strchr>:
 8003e50:	b2c9      	uxtb	r1, r1
 8003e52:	4603      	mov	r3, r0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e5a:	b112      	cbz	r2, 8003e62 <strchr+0x12>
 8003e5c:	428a      	cmp	r2, r1
 8003e5e:	d1f9      	bne.n	8003e54 <strchr+0x4>
 8003e60:	4770      	bx	lr
 8003e62:	2900      	cmp	r1, #0
 8003e64:	bf18      	it	ne
 8003e66:	2000      	movne	r0, #0
 8003e68:	4770      	bx	lr

08003e6a <strncmp>:
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	b16a      	cbz	r2, 8003e8a <strncmp+0x20>
 8003e6e:	3901      	subs	r1, #1
 8003e70:	1884      	adds	r4, r0, r2
 8003e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d103      	bne.n	8003e86 <strncmp+0x1c>
 8003e7e:	42a0      	cmp	r0, r4
 8003e80:	d001      	beq.n	8003e86 <strncmp+0x1c>
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d1f5      	bne.n	8003e72 <strncmp+0x8>
 8003e86:	1ad0      	subs	r0, r2, r3
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	e7fc      	b.n	8003e88 <strncmp+0x1e>
	...

08003e90 <__libc_init_array>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4d0d      	ldr	r5, [pc, #52]	@ (8003ec8 <__libc_init_array+0x38>)
 8003e94:	4c0d      	ldr	r4, [pc, #52]	@ (8003ecc <__libc_init_array+0x3c>)
 8003e96:	1b64      	subs	r4, r4, r5
 8003e98:	10a4      	asrs	r4, r4, #2
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	42a6      	cmp	r6, r4
 8003e9e:	d109      	bne.n	8003eb4 <__libc_init_array+0x24>
 8003ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ed0 <__libc_init_array+0x40>)
 8003ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ed4 <__libc_init_array+0x44>)
 8003ea4:	f000 f818 	bl	8003ed8 <_init>
 8003ea8:	1b64      	subs	r4, r4, r5
 8003eaa:	10a4      	asrs	r4, r4, #2
 8003eac:	2600      	movs	r6, #0
 8003eae:	42a6      	cmp	r6, r4
 8003eb0:	d105      	bne.n	8003ebe <__libc_init_array+0x2e>
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb8:	4798      	blx	r3
 8003eba:	3601      	adds	r6, #1
 8003ebc:	e7ee      	b.n	8003e9c <__libc_init_array+0xc>
 8003ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec2:	4798      	blx	r3
 8003ec4:	3601      	adds	r6, #1
 8003ec6:	e7f2      	b.n	8003eae <__libc_init_array+0x1e>
 8003ec8:	08003fc8 	.word	0x08003fc8
 8003ecc:	08003fc8 	.word	0x08003fc8
 8003ed0:	08003fc8 	.word	0x08003fc8
 8003ed4:	08003fcc 	.word	0x08003fcc

08003ed8 <_init>:
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eda:	bf00      	nop
 8003edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ede:	bc08      	pop	{r3}
 8003ee0:	469e      	mov	lr, r3
 8003ee2:	4770      	bx	lr

08003ee4 <_fini>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr
