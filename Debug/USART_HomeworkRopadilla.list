
USART_HomeworkRopadilla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003270  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003468  08003468  00004468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c8  080034c8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034d4  080034d4  000044d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  080034e4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080034e4  000050dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f9  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c6  00000000  00000000  0000e833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b6  00000000  00000000  00010648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e99  00000000  00000000  00010bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000957f  00000000  00000000  00036a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed473  00000000  00000000  00040016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cdc  00000000  00000000  0012d4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003450 	.word	0x08003450

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003450 	.word	0x08003450

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000270:	f000 b988 	b.w	8000584 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	468e      	mov	lr, r1
 8000294:	4604      	mov	r4, r0
 8000296:	4688      	mov	r8, r1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d14a      	bne.n	8000332 <__udivmoddi4+0xa6>
 800029c:	428a      	cmp	r2, r1
 800029e:	4617      	mov	r7, r2
 80002a0:	d962      	bls.n	8000368 <__udivmoddi4+0xdc>
 80002a2:	fab2 f682 	clz	r6, r2
 80002a6:	b14e      	cbz	r6, 80002bc <__udivmoddi4+0x30>
 80002a8:	f1c6 0320 	rsb	r3, r6, #32
 80002ac:	fa01 f806 	lsl.w	r8, r1, r6
 80002b0:	fa20 f303 	lsr.w	r3, r0, r3
 80002b4:	40b7      	lsls	r7, r6
 80002b6:	ea43 0808 	orr.w	r8, r3, r8
 80002ba:	40b4      	lsls	r4, r6
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f fc87 	uxth.w	ip, r7
 80002c4:	fbb8 f1fe 	udiv	r1, r8, lr
 80002c8:	0c23      	lsrs	r3, r4, #16
 80002ca:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d2:	fb01 f20c 	mul.w	r2, r1, ip
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x62>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002e0:	f080 80ea 	bcs.w	80004b8 <__udivmoddi4+0x22c>
 80002e4:	429a      	cmp	r2, r3
 80002e6:	f240 80e7 	bls.w	80004b8 <__udivmoddi4+0x22c>
 80002ea:	3902      	subs	r1, #2
 80002ec:	443b      	add	r3, r7
 80002ee:	1a9a      	subs	r2, r3, r2
 80002f0:	b2a3      	uxth	r3, r4
 80002f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000302:	459c      	cmp	ip, r3
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x8e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800030c:	f080 80d6 	bcs.w	80004bc <__udivmoddi4+0x230>
 8000310:	459c      	cmp	ip, r3
 8000312:	f240 80d3 	bls.w	80004bc <__udivmoddi4+0x230>
 8000316:	443b      	add	r3, r7
 8000318:	3802      	subs	r0, #2
 800031a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800031e:	eba3 030c 	sub.w	r3, r3, ip
 8000322:	2100      	movs	r1, #0
 8000324:	b11d      	cbz	r5, 800032e <__udivmoddi4+0xa2>
 8000326:	40f3      	lsrs	r3, r6
 8000328:	2200      	movs	r2, #0
 800032a:	e9c5 3200 	strd	r3, r2, [r5]
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d905      	bls.n	8000342 <__udivmoddi4+0xb6>
 8000336:	b10d      	cbz	r5, 800033c <__udivmoddi4+0xb0>
 8000338:	e9c5 0100 	strd	r0, r1, [r5]
 800033c:	2100      	movs	r1, #0
 800033e:	4608      	mov	r0, r1
 8000340:	e7f5      	b.n	800032e <__udivmoddi4+0xa2>
 8000342:	fab3 f183 	clz	r1, r3
 8000346:	2900      	cmp	r1, #0
 8000348:	d146      	bne.n	80003d8 <__udivmoddi4+0x14c>
 800034a:	4573      	cmp	r3, lr
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xc8>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 8105 	bhi.w	800055e <__udivmoddi4+0x2d2>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb6e 0203 	sbc.w	r2, lr, r3
 800035a:	2001      	movs	r0, #1
 800035c:	4690      	mov	r8, r2
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e5      	beq.n	800032e <__udivmoddi4+0xa2>
 8000362:	e9c5 4800 	strd	r4, r8, [r5]
 8000366:	e7e2      	b.n	800032e <__udivmoddi4+0xa2>
 8000368:	2a00      	cmp	r2, #0
 800036a:	f000 8090 	beq.w	800048e <__udivmoddi4+0x202>
 800036e:	fab2 f682 	clz	r6, r2
 8000372:	2e00      	cmp	r6, #0
 8000374:	f040 80a4 	bne.w	80004c0 <__udivmoddi4+0x234>
 8000378:	1a8a      	subs	r2, r1, r2
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000380:	b280      	uxth	r0, r0
 8000382:	b2bc      	uxth	r4, r7
 8000384:	2101      	movs	r1, #1
 8000386:	fbb2 fcfe 	udiv	ip, r2, lr
 800038a:	fb0e 221c 	mls	r2, lr, ip, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb04 f20c 	mul.w	r2, r4, ip
 8000396:	429a      	cmp	r2, r3
 8000398:	d907      	bls.n	80003aa <__udivmoddi4+0x11e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x11c>
 80003a2:	429a      	cmp	r2, r3
 80003a4:	f200 80e0 	bhi.w	8000568 <__udivmoddi4+0x2dc>
 80003a8:	46c4      	mov	ip, r8
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b0:	fb0e 3312 	mls	r3, lr, r2, r3
 80003b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003b8:	fb02 f404 	mul.w	r4, r2, r4
 80003bc:	429c      	cmp	r4, r3
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x144>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x142>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f200 80ca 	bhi.w	8000562 <__udivmoddi4+0x2d6>
 80003ce:	4602      	mov	r2, r0
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003d6:	e7a5      	b.n	8000324 <__udivmoddi4+0x98>
 80003d8:	f1c1 0620 	rsb	r6, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 f706 	lsr.w	r7, r2, r6
 80003e2:	431f      	orrs	r7, r3
 80003e4:	fa0e f401 	lsl.w	r4, lr, r1
 80003e8:	fa20 f306 	lsr.w	r3, r0, r6
 80003ec:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fa00 f801 	lsl.w	r8, r0, r1
 80003fa:	fa1f fc87 	uxth.w	ip, r7
 80003fe:	fbbe f0f9 	udiv	r0, lr, r9
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	fb09 ee10 	mls	lr, r9, r0, lr
 8000408:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800040c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000410:	45a6      	cmp	lr, r4
 8000412:	fa02 f201 	lsl.w	r2, r2, r1
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1a0>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800041e:	f080 809c 	bcs.w	800055a <__udivmoddi4+0x2ce>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f240 8099 	bls.w	800055a <__udivmoddi4+0x2ce>
 8000428:	3802      	subs	r0, #2
 800042a:	443c      	add	r4, r7
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	fa1f fe83 	uxth.w	lr, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000440:	fb03 fc0c 	mul.w	ip, r3, ip
 8000444:	45a4      	cmp	ip, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1ce>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800044e:	f080 8082 	bcs.w	8000556 <__udivmoddi4+0x2ca>
 8000452:	45a4      	cmp	ip, r4
 8000454:	d97f      	bls.n	8000556 <__udivmoddi4+0x2ca>
 8000456:	3b02      	subs	r3, #2
 8000458:	443c      	add	r4, r7
 800045a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800045e:	eba4 040c 	sub.w	r4, r4, ip
 8000462:	fba0 ec02 	umull	lr, ip, r0, r2
 8000466:	4564      	cmp	r4, ip
 8000468:	4673      	mov	r3, lr
 800046a:	46e1      	mov	r9, ip
 800046c:	d362      	bcc.n	8000534 <__udivmoddi4+0x2a8>
 800046e:	d05f      	beq.n	8000530 <__udivmoddi4+0x2a4>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x1fe>
 8000472:	ebb8 0203 	subs.w	r2, r8, r3
 8000476:	eb64 0409 	sbc.w	r4, r4, r9
 800047a:	fa04 f606 	lsl.w	r6, r4, r6
 800047e:	fa22 f301 	lsr.w	r3, r2, r1
 8000482:	431e      	orrs	r6, r3
 8000484:	40cc      	lsrs	r4, r1
 8000486:	e9c5 6400 	strd	r6, r4, [r5]
 800048a:	2100      	movs	r1, #0
 800048c:	e74f      	b.n	800032e <__udivmoddi4+0xa2>
 800048e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000492:	0c01      	lsrs	r1, r0, #16
 8000494:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000498:	b280      	uxth	r0, r0
 800049a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800049e:	463b      	mov	r3, r7
 80004a0:	4638      	mov	r0, r7
 80004a2:	463c      	mov	r4, r7
 80004a4:	46b8      	mov	r8, r7
 80004a6:	46be      	mov	lr, r7
 80004a8:	2620      	movs	r6, #32
 80004aa:	fbb1 f1f7 	udiv	r1, r1, r7
 80004ae:	eba2 0208 	sub.w	r2, r2, r8
 80004b2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004b6:	e766      	b.n	8000386 <__udivmoddi4+0xfa>
 80004b8:	4601      	mov	r1, r0
 80004ba:	e718      	b.n	80002ee <__udivmoddi4+0x62>
 80004bc:	4610      	mov	r0, r2
 80004be:	e72c      	b.n	800031a <__udivmoddi4+0x8e>
 80004c0:	f1c6 0220 	rsb	r2, r6, #32
 80004c4:	fa2e f302 	lsr.w	r3, lr, r2
 80004c8:	40b7      	lsls	r7, r6
 80004ca:	40b1      	lsls	r1, r6
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	430a      	orrs	r2, r1
 80004d6:	fbb3 f8fe 	udiv	r8, r3, lr
 80004da:	b2bc      	uxth	r4, r7
 80004dc:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e0:	0c11      	lsrs	r1, r2, #16
 80004e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e6:	fb08 f904 	mul.w	r9, r8, r4
 80004ea:	40b0      	lsls	r0, r6
 80004ec:	4589      	cmp	r9, r1
 80004ee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004f2:	b280      	uxth	r0, r0
 80004f4:	d93e      	bls.n	8000574 <__udivmoddi4+0x2e8>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004fc:	d201      	bcs.n	8000502 <__udivmoddi4+0x276>
 80004fe:	4589      	cmp	r9, r1
 8000500:	d81f      	bhi.n	8000542 <__udivmoddi4+0x2b6>
 8000502:	eba1 0109 	sub.w	r1, r1, r9
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000512:	b292      	uxth	r2, r2
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	4542      	cmp	r2, r8
 800051a:	d229      	bcs.n	8000570 <__udivmoddi4+0x2e4>
 800051c:	18ba      	adds	r2, r7, r2
 800051e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000522:	d2c4      	bcs.n	80004ae <__udivmoddi4+0x222>
 8000524:	4542      	cmp	r2, r8
 8000526:	d2c2      	bcs.n	80004ae <__udivmoddi4+0x222>
 8000528:	f1a9 0102 	sub.w	r1, r9, #2
 800052c:	443a      	add	r2, r7
 800052e:	e7be      	b.n	80004ae <__udivmoddi4+0x222>
 8000530:	45f0      	cmp	r8, lr
 8000532:	d29d      	bcs.n	8000470 <__udivmoddi4+0x1e4>
 8000534:	ebbe 0302 	subs.w	r3, lr, r2
 8000538:	eb6c 0c07 	sbc.w	ip, ip, r7
 800053c:	3801      	subs	r0, #1
 800053e:	46e1      	mov	r9, ip
 8000540:	e796      	b.n	8000470 <__udivmoddi4+0x1e4>
 8000542:	eba7 0909 	sub.w	r9, r7, r9
 8000546:	4449      	add	r1, r9
 8000548:	f1a8 0c02 	sub.w	ip, r8, #2
 800054c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000550:	fb09 f804 	mul.w	r8, r9, r4
 8000554:	e7db      	b.n	800050e <__udivmoddi4+0x282>
 8000556:	4673      	mov	r3, lr
 8000558:	e77f      	b.n	800045a <__udivmoddi4+0x1ce>
 800055a:	4650      	mov	r0, sl
 800055c:	e766      	b.n	800042c <__udivmoddi4+0x1a0>
 800055e:	4608      	mov	r0, r1
 8000560:	e6fd      	b.n	800035e <__udivmoddi4+0xd2>
 8000562:	443b      	add	r3, r7
 8000564:	3a02      	subs	r2, #2
 8000566:	e733      	b.n	80003d0 <__udivmoddi4+0x144>
 8000568:	f1ac 0c02 	sub.w	ip, ip, #2
 800056c:	443b      	add	r3, r7
 800056e:	e71c      	b.n	80003aa <__udivmoddi4+0x11e>
 8000570:	4649      	mov	r1, r9
 8000572:	e79c      	b.n	80004ae <__udivmoddi4+0x222>
 8000574:	eba1 0109 	sub.w	r1, r1, r9
 8000578:	46c4      	mov	ip, r8
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	e7c4      	b.n	800050e <__udivmoddi4+0x282>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <HAL_UART_RxCpltCallback+0x3c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d10f      	bne.n	80005ba <HAL_UART_RxCpltCallback+0x32>
    memcpy(command_buffer, uart_rx_buffer, RX_BUFFER_SIZE);
 800059a:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <HAL_UART_RxCpltCallback+0x40>)
 800059c:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <HAL_UART_RxCpltCallback+0x44>)
 800059e:	4614      	mov	r4, r2
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	8023      	strh	r3, [r4, #0]
    command_ready = 1;
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <HAL_UART_RxCpltCallback+0x48>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, uart_rx_buffer, RX_BUFFER_SIZE);
 80005b0:	2212      	movs	r2, #18
 80005b2:	4906      	ldr	r1, [pc, #24]	@ (80005cc <HAL_UART_RxCpltCallback+0x44>)
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <HAL_UART_RxCpltCallback+0x4c>)
 80005b6:	f001 ffce 	bl	8002556 <HAL_UART_Receive_IT>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bdb0      	pop	{r4, r5, r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40004800 	.word	0x40004800
 80005c8:	200000c4 	.word	0x200000c4
 80005cc:	200000b0 	.word	0x200000b0
 80005d0:	200000d6 	.word	0x200000d6
 80005d4:	20000028 	.word	0x20000028

080005d8 <ParseCommand>:

void ParseCommand(char *cmd)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if (strncmp(cmd, "{LED:", 5) == 0 &&
 80005e0:	2205      	movs	r2, #5
 80005e2:	493b      	ldr	r1, [pc, #236]	@ (80006d0 <ParseCommand+0xf8>)
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f002 fefd 	bl	80033e4 <strncmp>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d16a      	bne.n	80006c6 <ParseCommand+0xee>
      cmd[7] == ',' &&
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3307      	adds	r3, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
  if (strncmp(cmd, "{LED:", 5) == 0 &&
 80005f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80005f8:	d165      	bne.n	80006c6 <ParseCommand+0xee>
      strncmp(&cmd[8], "STATE:", 6) == 0 &&
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3308      	adds	r3, #8
 80005fe:	2206      	movs	r2, #6
 8000600:	4934      	ldr	r1, [pc, #208]	@ (80006d4 <ParseCommand+0xfc>)
 8000602:	4618      	mov	r0, r3
 8000604:	f002 feee 	bl	80033e4 <strncmp>
 8000608:	4603      	mov	r3, r0
      cmd[7] == ',' &&
 800060a:	2b00      	cmp	r3, #0
 800060c:	d15b      	bne.n	80006c6 <ParseCommand+0xee>
      cmd[15] == '}' &&
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	330f      	adds	r3, #15
 8000612:	781b      	ldrb	r3, [r3, #0]
      strncmp(&cmd[8], "STATE:", 6) == 0 &&
 8000614:	2b7d      	cmp	r3, #125	@ 0x7d
 8000616:	d156      	bne.n	80006c6 <ParseCommand+0xee>
      (cmd[14] == 'F' || cmd[14] == 'N')) // crude ON/OFF check
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	330e      	adds	r3, #14
 800061c:	781b      	ldrb	r3, [r3, #0]
      cmd[15] == '}' &&
 800061e:	2b46      	cmp	r3, #70	@ 0x46
 8000620:	d004      	beq.n	800062c <ParseCommand+0x54>
      (cmd[14] == 'F' || cmd[14] == 'N')) // crude ON/OFF check
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	330e      	adds	r3, #14
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b4e      	cmp	r3, #78	@ 0x4e
 800062a:	d14c      	bne.n	80006c6 <ParseCommand+0xee>
  {
    char led_id[3] = { cmd[5], cmd[6], '\0' };
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	795b      	ldrb	r3, [r3, #5]
 8000630:	733b      	strb	r3, [r7, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	737b      	strb	r3, [r7, #13]
 8000638:	2300      	movs	r3, #0
 800063a:	73bb      	strb	r3, [r7, #14]
    char state[4] = { cmd[13], cmd[14], '\0' };
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7b5b      	ldrb	r3, [r3, #13]
 8000644:	723b      	strb	r3, [r7, #8]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7b9b      	ldrb	r3, [r3, #14]
 800064a:	727b      	strb	r3, [r7, #9]

    GPIO_PinState pin_state = (strcmp(state, "ON") == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4921      	ldr	r1, [pc, #132]	@ (80006d8 <ParseCommand+0x100>)
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdf0 	bl	8000238 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf0c      	ite	eq
 800065e:	2301      	moveq	r3, #1
 8000660:	2300      	movne	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]

    if (strcmp(led_id, "01") == 0) {
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	491c      	ldr	r1, [pc, #112]	@ (80006dc <ParseCommand+0x104>)
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fde3 	bl	8000238 <strcmp>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d106      	bne.n	8000686 <ParseCommand+0xae>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pin_state); // Adjust to your green LED pin
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	461a      	mov	r2, r3
 800067c:	2101      	movs	r1, #1
 800067e:	4818      	ldr	r0, [pc, #96]	@ (80006e0 <ParseCommand+0x108>)
 8000680:	f000 fd2c 	bl	80010dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state); // Adjust to your blue LED pin
    } else if (strcmp(led_id, "03") == 0) {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state); // Adjust to your red LED pin
    }
  }
}
 8000684:	e01f      	b.n	80006c6 <ParseCommand+0xee>
    } else if (strcmp(led_id, "02") == 0) {
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4916      	ldr	r1, [pc, #88]	@ (80006e4 <ParseCommand+0x10c>)
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fdd3 	bl	8000238 <strcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d106      	bne.n	80006a6 <ParseCommand+0xce>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state); // Adjust to your blue LED pin
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	461a      	mov	r2, r3
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <ParseCommand+0x108>)
 80006a0:	f000 fd1c 	bl	80010dc <HAL_GPIO_WritePin>
}
 80006a4:	e00f      	b.n	80006c6 <ParseCommand+0xee>
    } else if (strcmp(led_id, "03") == 0) {
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	490f      	ldr	r1, [pc, #60]	@ (80006e8 <ParseCommand+0x110>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fdc3 	bl	8000238 <strcmp>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d106      	bne.n	80006c6 <ParseCommand+0xee>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state); // Adjust to your red LED pin
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	461a      	mov	r2, r3
 80006bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <ParseCommand+0x108>)
 80006c2:	f000 fd0b 	bl	80010dc <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08003468 	.word	0x08003468
 80006d4:	08003470 	.word	0x08003470
 80006d8:	08003478 	.word	0x08003478
 80006dc:	0800347c 	.word	0x0800347c
 80006e0:	40020400 	.word	0x40020400
 80006e4:	08003480 	.word	0x08003480
 80006e8:	08003484 	.word	0x08003484

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fa04 	bl	8000afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f841 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f8df 	bl	80008bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006fe:	f000 f8ad 	bl	800085c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  char *startup_msg = "STM32 Ready. Send LED commands...\r\n";
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <main+0x78>)
 8000704:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)startup_msg, strlen(startup_msg), HAL_MAX_DELAY);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fda0 	bl	800024c <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	4814      	ldr	r0, [pc, #80]	@ (8000768 <main+0x7c>)
 8000718:	f001 fe94 	bl	8002444 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, uart_rx_buffer, RX_BUFFER_SIZE);
 800071c:	2212      	movs	r2, #18
 800071e:	4913      	ldr	r1, [pc, #76]	@ (800076c <main+0x80>)
 8000720:	4811      	ldr	r0, [pc, #68]	@ (8000768 <main+0x7c>)
 8000722:	f001 ff18 	bl	8002556 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready) {
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <main+0x84>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0fa      	beq.n	8000726 <main+0x3a>
	        command_ready = 0;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <main+0x84>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Transmit(&huart3, (uint8_t*)command_buffer, strlen(command_buffer), HAL_MAX_DELAY);
 8000736:	480f      	ldr	r0, [pc, #60]	@ (8000774 <main+0x88>)
 8000738:	f7ff fd88 	bl	800024c <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000744:	490b      	ldr	r1, [pc, #44]	@ (8000774 <main+0x88>)
 8000746:	4808      	ldr	r0, [pc, #32]	@ (8000768 <main+0x7c>)
 8000748:	f001 fe7c 	bl	8002444 <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800074c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000750:	2202      	movs	r2, #2
 8000752:	4909      	ldr	r1, [pc, #36]	@ (8000778 <main+0x8c>)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <main+0x7c>)
 8000756:	f001 fe75 	bl	8002444 <HAL_UART_Transmit>
	        ParseCommand(command_buffer);
 800075a:	4806      	ldr	r0, [pc, #24]	@ (8000774 <main+0x88>)
 800075c:	f7ff ff3c 	bl	80005d8 <ParseCommand>
	  if (command_ready) {
 8000760:	e7e1      	b.n	8000726 <main+0x3a>
 8000762:	bf00      	nop
 8000764:	08003488 	.word	0x08003488
 8000768:	20000028 	.word	0x20000028
 800076c:	200000b0 	.word	0x200000b0
 8000770:	200000d6 	.word	0x200000d6
 8000774:	200000c4 	.word	0x200000c4
 8000778:	080034ac 	.word	0x080034ac

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2234      	movs	r2, #52	@ 0x34
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fe22 	bl	80033d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <SystemClock_Config+0xd8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <SystemClock_Config+0xd8>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <SystemClock_Config+0xd8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <SystemClock_Config+0xdc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c0:	4a25      	ldr	r2, [pc, #148]	@ (8000858 <SystemClock_Config+0xdc>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <SystemClock_Config+0xdc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ec:	2360      	movs	r3, #96	@ 0x60
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fcd5 	bl	80011b0 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080c:	f000 f882 	bl	8000914 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000810:	f000 fc7e 	bl	8001110 <HAL_PWREx_EnableOverDrive>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800081a:	f000 f87b 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2103      	movs	r1, #3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 ff66 	bl	800170c <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000846:	f000 f865 	bl	8000914 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	@ 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	@ (80008b8 <MX_USART3_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART3_UART_Init+0x58>)
 80008a0:	f001 fd82 	bl	80023a8 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f833 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000028 	.word	0x20000028
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_GPIO_Init+0x50>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <MX_GPIO_Init+0x50>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6313      	str	r3, [r2, #48]	@ 0x30
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_GPIO_Init+0x50>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_14; // Change to your actual LED pins
 80008e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_GPIO_Init+0x54>)
 8000900:	f000 fa40 	bl	8000d84 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x44>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x44>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x44>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000948:	6453      	str	r3, [r2, #68]	@ 0x44
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x44>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0ae      	sub	sp, #184	@ 0xb8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2290      	movs	r2, #144	@ 0x90
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fd23 	bl	80033d4 <memset>
  if(huart->Instance==USART3)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a22      	ldr	r2, [pc, #136]	@ (8000a1c <HAL_UART_MspInit+0xb4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d13c      	bne.n	8000a12 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800099c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800099e:	2300      	movs	r3, #0
 80009a0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f8d6 	bl	8001b58 <HAL_RCCEx_PeriphCLKConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009b2:	f7ff ffaf 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <HAL_UART_MspInit+0xb8>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0xb8>)
 80009bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0xb8>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_UART_MspInit+0xb8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <HAL_UART_MspInit+0xb8>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0xb8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a00:	2307      	movs	r3, #7
 8000a02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_UART_MspInit+0xbc>)
 8000a0e:	f000 f9b9 	bl	8000d84 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a12:	bf00      	nop
 8000a14:	37b8      	adds	r7, #184	@ 0xb8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004800 	.word	0x40004800
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020c00 	.word	0x40020c00

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f87b 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	@ (8000af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 fc95 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fe05 	bl	80006ec <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af0:	080034d8 	.word	0x080034d8
  ldr r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af8:	200000dc 	.word	0x200000dc

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>

08000afe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f000 f90a 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 f805 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0e:	f7ff ff07 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f917 	bl	8000d6a <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b54:	f000 f8ed 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200000d8 	.word	0x200000d8

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200000d8 	.word	0x200000d8

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff5c 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffb0 	bl	8000cd8 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e175      	b.n	8001090 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8164 	bne.w	800108a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x56>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80be 	beq.w	800108a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b66      	ldr	r3, [pc, #408]	@ (80010a8 <HAL_GPIO_Init+0x324>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a65      	ldr	r2, [pc, #404]	@ (80010a8 <HAL_GPIO_Init+0x324>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b63      	ldr	r3, [pc, #396]	@ (80010a8 <HAL_GPIO_Init+0x324>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f26:	4a61      	ldr	r2, [pc, #388]	@ (80010ac <HAL_GPIO_Init+0x328>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	@ (80010b0 <HAL_GPIO_Init+0x32c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d037      	beq.n	8000fc2 <HAL_GPIO_Init+0x23e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a57      	ldr	r2, [pc, #348]	@ (80010b4 <HAL_GPIO_Init+0x330>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d031      	beq.n	8000fbe <HAL_GPIO_Init+0x23a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	@ (80010b8 <HAL_GPIO_Init+0x334>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x236>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a55      	ldr	r2, [pc, #340]	@ (80010bc <HAL_GPIO_Init+0x338>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x232>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a54      	ldr	r2, [pc, #336]	@ (80010c0 <HAL_GPIO_Init+0x33c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x22e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a53      	ldr	r2, [pc, #332]	@ (80010c4 <HAL_GPIO_Init+0x340>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x22a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a52      	ldr	r2, [pc, #328]	@ (80010c8 <HAL_GPIO_Init+0x344>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x226>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a51      	ldr	r2, [pc, #324]	@ (80010cc <HAL_GPIO_Init+0x348>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x222>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a50      	ldr	r2, [pc, #320]	@ (80010d0 <HAL_GPIO_Init+0x34c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x21e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	@ (80010d4 <HAL_GPIO_Init+0x350>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x21a>
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	e012      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	e010      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	e00e      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	@ (80010ac <HAL_GPIO_Init+0x328>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a34      	ldr	r2, [pc, #208]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae86 	bls.w	8000da4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40022000 	.word	0x40022000
 80010d4:	40022400 	.word	0x40022400
 80010d8:	40013c00 	.word	0x40013c00

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a22      	ldr	r2, [pc, #136]	@ (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800113c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113e:	f7ff fd2f 	bl	8000ba0 <HAL_GetTick>
 8001142:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001144:	e009      	b.n	800115a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001146:	f7ff fd2b 	bl	8000ba0 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001154:	d901      	bls.n	800115a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e022      	b.n	80011a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001166:	d1ee      	bne.n	8001146 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800116e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001174:	f7ff fd14 	bl	8000ba0 <HAL_GetTick>
 8001178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800117a:	e009      	b.n	8001190 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800117c:	f7ff fd10 	bl	8000ba0 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800118a:	d901      	bls.n	8001190 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e007      	b.n	80011a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800119c:	d1ee      	bne.n	800117c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e29b      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8087 	beq.w	80012e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d4:	4b96      	ldr	r3, [pc, #600]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d00c      	beq.n	80011fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e0:	4b93      	ldr	r3, [pc, #588]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d112      	bne.n	8001212 <HAL_RCC_OscConfig+0x62>
 80011ec:	4b90      	ldr	r3, [pc, #576]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011f8:	d10b      	bne.n	8001212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	4b8d      	ldr	r3, [pc, #564]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d06c      	beq.n	80012e0 <HAL_RCC_OscConfig+0x130>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d168      	bne.n	80012e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e275      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x7a>
 800121c:	4b84      	ldr	r3, [pc, #528]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a83      	ldr	r2, [pc, #524]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e02e      	b.n	8001288 <HAL_RCC_OscConfig+0xd8>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x9c>
 8001232:	4b7f      	ldr	r3, [pc, #508]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a7e      	ldr	r2, [pc, #504]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b7c      	ldr	r3, [pc, #496]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a7b      	ldr	r2, [pc, #492]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001244:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xd8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0xc0>
 8001256:	4b76      	ldr	r3, [pc, #472]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a75      	ldr	r2, [pc, #468]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b73      	ldr	r3, [pc, #460]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a72      	ldr	r2, [pc, #456]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xd8>
 8001270:	4b6f      	ldr	r3, [pc, #444]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a6e      	ldr	r2, [pc, #440]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b6c      	ldr	r3, [pc, #432]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a6b      	ldr	r2, [pc, #428]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc86 	bl	8000ba0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc82 	bl	8000ba0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	@ 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e229      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xe8>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc72 	bl	8000ba0 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc6e 	bl	8000ba0 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	@ 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e215      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b57      	ldr	r3, [pc, #348]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x110>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d069      	beq.n	80013c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ee:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x190>
 8001306:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x17a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1e9      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	493d      	ldr	r1, [pc, #244]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e040      	b.n	80013c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d023      	beq.n	8001390 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a38      	ldr	r2, [pc, #224]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fc24 	bl	8000ba0 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fc20 	bl	8000ba0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1c7      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4929      	ldr	r1, [pc, #164]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a26      	ldr	r2, [pc, #152]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fc00 	bl	8000ba0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fbfc 	bl	8000ba0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1a3      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d038      	beq.n	8001440 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d019      	beq.n	800140a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80013d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013da:	4a15      	ldr	r2, [pc, #84]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff fbdd 	bl	8000ba0 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff fbd9 	bl	8000ba0 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e180      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 80013fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x23a>
 8001408:	e01a      	b.n	8001440 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 800140c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800140e:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <HAL_RCC_OscConfig+0x280>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff fbc3 	bl	8000ba0 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fbbf 	bl	8000ba0 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d903      	bls.n	8001434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e166      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
 8001430:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b92      	ldr	r3, [pc, #584]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ee      	bne.n	800141e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a4 	beq.w	8001596 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b8c      	ldr	r3, [pc, #560]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b89      	ldr	r3, [pc, #548]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a88      	ldr	r2, [pc, #544]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b86      	ldr	r3, [pc, #536]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001476:	4b83      	ldr	r3, [pc, #524]	@ (8001684 <HAL_RCC_OscConfig+0x4d4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001482:	4b80      	ldr	r3, [pc, #512]	@ (8001684 <HAL_RCC_OscConfig+0x4d4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a7f      	ldr	r2, [pc, #508]	@ (8001684 <HAL_RCC_OscConfig+0x4d4>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb87 	bl	8000ba0 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fb83 	bl	8000ba0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	@ 0x64
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e12a      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b76      	ldr	r3, [pc, #472]	@ (8001684 <HAL_RCC_OscConfig+0x4d4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x31a>
 80014bc:	4b70      	ldr	r3, [pc, #448]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c0:	4a6f      	ldr	r2, [pc, #444]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c8:	e02d      	b.n	8001526 <HAL_RCC_OscConfig+0x376>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x33c>
 80014d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014de:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	4a67      	ldr	r2, [pc, #412]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ea:	e01c      	b.n	8001526 <HAL_RCC_OscConfig+0x376>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x35e>
 80014f4:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f8:	4a61      	ldr	r2, [pc, #388]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001500:	4b5f      	ldr	r3, [pc, #380]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001504:	4a5e      	ldr	r2, [pc, #376]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	@ 0x70
 800150c:	e00b      	b.n	8001526 <HAL_RCC_OscConfig+0x376>
 800150e:	4b5c      	ldr	r3, [pc, #368]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001512:	4a5b      	ldr	r2, [pc, #364]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6713      	str	r3, [r2, #112]	@ 0x70
 800151a:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151e:	4a58      	ldr	r2, [pc, #352]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d015      	beq.n	800155a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fb37 	bl	8000ba0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fb33 	bl	8000ba0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0d8      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ee      	beq.n	8001536 <HAL_RCC_OscConfig+0x386>
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fb21 	bl	8000ba0 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fb1d 	bl	8000ba0 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0c2      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ee      	bne.n	8001562 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d105      	bne.n	8001596 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a3c      	ldr	r2, [pc, #240]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80ae 	beq.w	80016fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a0:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d06d      	beq.n	8001688 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d14b      	bne.n	800164c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a31      	ldr	r2, [pc, #196]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff faee 	bl	8000ba0 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff faea 	bl	8000ba0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e091      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	071b      	lsls	r3, r3, #28
 8001612:	491b      	ldr	r1, [pc, #108]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a18      	ldr	r2, [pc, #96]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800161e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fabc 	bl	8000ba0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fab8 	bl	8000ba0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e05f      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x47c>
 800164a:	e057      	b.n	80016fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff faa2 	bl	8000ba0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fa9e 	bl	8000ba0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e045      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x4b0>
 800167e:	e03d      	b.n	80016fc <HAL_RCC_OscConfig+0x54c>
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_RCC_OscConfig+0x558>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d030      	beq.n	80016f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d129      	bne.n	80016f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d122      	bne.n	80016f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d119      	bne.n	80016f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	3b01      	subs	r3, #1
 80016d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d10f      	bne.n	80016f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d0      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b6a      	ldr	r3, [pc, #424]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b67      	ldr	r3, [pc, #412]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 020f 	bic.w	r2, r3, #15
 800173a:	4965      	ldr	r1, [pc, #404]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d040      	beq.n	8001830 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e073      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3d      	ldr	r3, [pc, #244]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4936      	ldr	r1, [pc, #216]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7ff f9ce 	bl	8000ba0 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff f9ca 	bl	8000ba0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e053      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d210      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 020f 	bic.w	r2, r3, #15
 8001846:	4922      	ldr	r1, [pc, #136]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	@ (80018d8 <HAL_RCC_ClockConfig+0x1cc>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1d0>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_ClockConfig+0x1d4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f92a 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	080034b0 	.word	0x080034b0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b094      	sub	sp, #80	@ 0x50
 80018ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80018f0:	2300      	movs	r3, #0
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018f4:	2300      	movs	r3, #0
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fc:	4b79      	ldr	r3, [pc, #484]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d00d      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 8001908:	2b08      	cmp	r3, #8
 800190a:	f200 80e1 	bhi.w	8001ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x34>
 8001912:	2b04      	cmp	r3, #4
 8001914:	d003      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x3a>
 8001916:	e0db      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800191a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800191c:	e0db      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191e:	4b73      	ldr	r3, [pc, #460]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x208>)
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001922:	e0d8      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001924:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800192e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001944:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
 8001952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0159      	lsls	r1, r3, #5
 8001964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001968:	0150      	lsls	r0, r2, #5
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4621      	mov	r1, r4
 8001970:	1a51      	subs	r1, r2, r1
 8001972:	6139      	str	r1, [r7, #16]
 8001974:	4629      	mov	r1, r5
 8001976:	eb63 0301 	sbc.w	r3, r3, r1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001988:	4659      	mov	r1, fp
 800198a:	018b      	lsls	r3, r1, #6
 800198c:	4651      	mov	r1, sl
 800198e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001992:	4651      	mov	r1, sl
 8001994:	018a      	lsls	r2, r1, #6
 8001996:	4651      	mov	r1, sl
 8001998:	ebb2 0801 	subs.w	r8, r2, r1
 800199c:	4659      	mov	r1, fp
 800199e:	eb63 0901 	sbc.w	r9, r3, r1
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b6:	4690      	mov	r8, r2
 80019b8:	4699      	mov	r9, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	eb18 0303 	adds.w	r3, r8, r3
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	462b      	mov	r3, r5
 80019c4:	eb49 0303 	adc.w	r3, r9, r3
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019d6:	4629      	mov	r1, r5
 80019d8:	024b      	lsls	r3, r1, #9
 80019da:	4621      	mov	r1, r4
 80019dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e0:	4621      	mov	r1, r4
 80019e2:	024a      	lsls	r2, r1, #9
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ea:	2200      	movs	r2, #0
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019f4:	f7fe fc32 	bl	800025c <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a00:	e058      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	464b      	mov	r3, r9
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0159      	lsls	r1, r3, #5
 8001a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2e:	0150      	lsls	r0, r2, #5
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4641      	mov	r1, r8
 8001a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a54:	ebb2 040a 	subs.w	r4, r2, sl
 8001a58:	eb63 050b 	sbc.w	r5, r3, fp
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	00eb      	lsls	r3, r5, #3
 8001a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a6a:	00e2      	lsls	r2, r4, #3
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	18e3      	adds	r3, r4, r3
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	464b      	mov	r3, r9
 8001a78:	eb45 0303 	adc.w	r3, r5, r3
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	028b      	lsls	r3, r1, #10
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a94:	4621      	mov	r1, r4
 8001a96:	028a      	lsls	r2, r1, #10
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	61fa      	str	r2, [r7, #28]
 8001aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa8:	f7fe fbd8 	bl	800025c <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3750      	adds	r7, #80	@ 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	080034c0 	.word	0x080034c0

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffdc 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	080034c0 	.word	0x080034c0

08001b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b80:	4b69      	ldr	r3, [pc, #420]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a68      	ldr	r2, [pc, #416]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b86:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b8a:	6093      	str	r3, [r2, #8]
 8001b8c:	4b66      	ldr	r3, [pc, #408]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b94:	4964      	ldr	r1, [pc, #400]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d017      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc0:	4959      	ldr	r1, [pc, #356]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d017      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bee:	4b4e      	ldr	r3, [pc, #312]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	494a      	ldr	r1, [pc, #296]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 808b 	beq.w	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	4a39      	ldr	r2, [pc, #228]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c48:	4b37      	ldr	r3, [pc, #220]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c54:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a34      	ldr	r2, [pc, #208]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c60:	f7fe ff9e 	bl	8000ba0 <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c68:	f7fe ff9a 	bl	8000ba0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	@ 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e38f      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c86:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d035      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d02e      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cba:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001cc6:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d114      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ff62 	bl	8000ba0 <HAL_GetTick>
 8001cdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe ff5e 	bl	8000ba0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e351      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ee      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d0e:	d111      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d1e:	400b      	ands	r3, r1
 8001d20:	4901      	ldr	r1, [pc, #4]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	0ffffcff 	.word	0x0ffffcff
 8001d34:	4bac      	ldr	r3, [pc, #688]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4aab      	ldr	r2, [pc, #684]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d3e:	6093      	str	r3, [r2, #8]
 8001d40:	4ba9      	ldr	r3, [pc, #676]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	49a6      	ldr	r1, [pc, #664]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d010      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d5e:	4ba2      	ldr	r3, [pc, #648]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d64:	4aa0      	ldr	r2, [pc, #640]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d6e:	4b9e      	ldr	r3, [pc, #632]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d78:	499b      	ldr	r1, [pc, #620]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d8c:	4b96      	ldr	r3, [pc, #600]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d9a:	4993      	ldr	r1, [pc, #588]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dae:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dbc:	498a      	ldr	r1, [pc, #552]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00a      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dd0:	4b85      	ldr	r3, [pc, #532]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dde:	4982      	ldr	r1, [pc, #520]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001df2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4979      	ldr	r1, [pc, #484]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00a      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e14:	4b74      	ldr	r3, [pc, #464]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1a:	f023 0203 	bic.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	4971      	ldr	r1, [pc, #452]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e36:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3c:	f023 020c 	bic.w	r2, r3, #12
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e44:	4968      	ldr	r1, [pc, #416]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e58:	4b63      	ldr	r3, [pc, #396]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	4960      	ldr	r1, [pc, #384]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e80:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e88:	4957      	ldr	r1, [pc, #348]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e9c:	4b52      	ldr	r3, [pc, #328]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	494f      	ldr	r1, [pc, #316]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	4946      	ldr	r1, [pc, #280]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ee0:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	493e      	ldr	r1, [pc, #248]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f02:	4b39      	ldr	r3, [pc, #228]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f10:	4935      	ldr	r1, [pc, #212]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f24:	4b30      	ldr	r3, [pc, #192]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f32:	492d      	ldr	r1, [pc, #180]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f46:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f54:	4924      	ldr	r1, [pc, #144]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f64:	d101      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f94:	4914      	ldr	r1, [pc, #80]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb8:	490b      	ldr	r1, [pc, #44]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00f      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fdc:	4902      	ldr	r1, [pc, #8]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fe4:	e002      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00b      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	4986      	ldr	r1, [pc, #536]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800201c:	4b81      	ldr	r3, [pc, #516]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002022:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800202c:	497d      	ldr	r1, [pc, #500]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d006      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80d6 	beq.w	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002048:	4b76      	ldr	r3, [pc, #472]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a75      	ldr	r2, [pc, #468]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002054:	f7fe fda4 	bl	8000ba0 <HAL_GetTick>
 8002058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800205c:	f7fe fda0 	bl	8000ba0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e195      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800206e:	4b6d      	ldr	r3, [pc, #436]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d021      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11d      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800208e:	4b65      	ldr	r3, [pc, #404]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800209c:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800209e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a2:	0e1b      	lsrs	r3, r3, #24
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	019a      	lsls	r2, r3, #6
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	041b      	lsls	r3, r3, #16
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	061b      	lsls	r3, r3, #24
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	071b      	lsls	r3, r3, #28
 80020c2:	4958      	ldr	r1, [pc, #352]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02e      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020f4:	d129      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002104:	4b47      	ldr	r3, [pc, #284]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800210a:	0f1b      	lsrs	r3, r3, #28
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	019a      	lsls	r2, r3, #6
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	071b      	lsls	r3, r3, #28
 800212a:	493e      	ldr	r1, [pc, #248]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002132:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002138:	f023 021f 	bic.w	r2, r3, #31
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	3b01      	subs	r3, #1
 8002142:	4938      	ldr	r1, [pc, #224]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01d      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002156:	4b33      	ldr	r3, [pc, #204]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800215c:	0e1b      	lsrs	r3, r3, #24
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002164:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800216a:	0f1b      	lsrs	r3, r3, #28
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	019a      	lsls	r2, r3, #6
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	431a      	orrs	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	071b      	lsls	r3, r3, #28
 800218a:	4926      	ldr	r1, [pc, #152]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d011      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	019a      	lsls	r2, r3, #6
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	071b      	lsls	r3, r3, #28
 80021ba:	491a      	ldr	r1, [pc, #104]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021c2:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ce:	f7fe fce7 	bl	8000ba0 <HAL_GetTick>
 80021d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021d6:	f7fe fce3 	bl	8000ba0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	@ 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0d8      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f040 80ce 	bne.w	8002398 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002208:	f7fe fcca 	bl	8000ba0 <HAL_GetTick>
 800220c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800220e:	e00b      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002210:	f7fe fcc6 	bl	8000ba0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d904      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0bb      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002228:	4b5e      	ldr	r3, [pc, #376]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002234:	d0ec      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002252:	2b00      	cmp	r3, #0
 8002254:	d02e      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d12a      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800225e:	4b51      	ldr	r3, [pc, #324]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800226c:	4b4d      	ldr	r3, [pc, #308]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	0f1b      	lsrs	r3, r3, #28
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	019a      	lsls	r2, r3, #6
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	061b      	lsls	r3, r3, #24
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	071b      	lsls	r3, r3, #28
 8002292:	4944      	ldr	r1, [pc, #272]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800229a:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	493d      	ldr	r1, [pc, #244]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d022      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c8:	d11d      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022ca:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022d8:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	0f1b      	lsrs	r3, r3, #28
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	019a      	lsls	r2, r3, #6
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	431a      	orrs	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	061b      	lsls	r3, r3, #24
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	4929      	ldr	r1, [pc, #164]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d028      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002318:	0e1b      	lsrs	r3, r3, #24
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002320:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	019a      	lsls	r2, r3, #6
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	431a      	orrs	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	071b      	lsls	r3, r3, #28
 8002346:	4917      	ldr	r1, [pc, #92]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002354:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	4911      	ldr	r1, [pc, #68]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002370:	f7fe fc16 	bl	8000ba0 <HAL_GetTick>
 8002374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002378:	f7fe fc12 	bl	8000ba0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e007      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002396:	d1ef      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e040      	b.n	800243c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe facc 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	@ 0x24
 80023d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fb66 	bl	8002ac0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8ff 	bl	80025f8 <UART_SetConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e01b      	b.n	800243c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fbe5 	bl	8002c04 <UART_CheckIdleState>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002458:	2b20      	cmp	r3, #32
 800245a:	d177      	bne.n	800254c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_UART_Transmit+0x24>
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e070      	b.n	800254e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2221      	movs	r2, #33	@ 0x21
 8002478:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247a:	f7fe fb91 	bl	8000ba0 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002498:	d108      	bne.n	80024ac <HAL_UART_Transmit+0x68>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e003      	b.n	80024b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024b4:	e02f      	b.n	8002516 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fc47 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e03b      	b.n	800254e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3302      	adds	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	e007      	b.n	8002504 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1c9      	bne.n	80024b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	2140      	movs	r1, #64	@ 0x40
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fc11 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e005      	b.n	800254e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b08a      	sub	sp, #40	@ 0x28
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	4613      	mov	r3, r2
 8002562:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256a:	2b20      	cmp	r3, #32
 800256c:	d132      	bne.n	80025d4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_UART_Receive_IT+0x24>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02b      	b.n	80025d6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	e853 3f00 	ldrex	r3, [r3]
 800259e:	613b      	str	r3, [r7, #16]
   return(result);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	623b      	str	r3, [r7, #32]
 80025b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	6a3a      	ldr	r2, [r7, #32]
 80025b8:	e841 2300 	strex	r3, r2, [r1]
 80025bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e6      	bne.n	8002592 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fc30 	bl	8002e30 <UART_Start_Receive_IT>
 80025d0:	4603      	mov	r3, r0
 80025d2:	e000      	b.n	80025d6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3728      	adds	r7, #40	@ 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4ba6      	ldr	r3, [pc, #664]	@ (80028bc <UART_SetConfig+0x2c4>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	6979      	ldr	r1, [r7, #20]
 800262c:	430b      	orrs	r3, r1
 800262e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a94      	ldr	r2, [pc, #592]	@ (80028c0 <UART_SetConfig+0x2c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d120      	bne.n	80026b6 <UART_SetConfig+0xbe>
 8002674:	4b93      	ldr	r3, [pc, #588]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d816      	bhi.n	80026b0 <UART_SetConfig+0xb8>
 8002682:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <UART_SetConfig+0x90>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002699 	.word	0x08002699
 800268c:	080026a5 	.word	0x080026a5
 8002690:	0800269f 	.word	0x0800269f
 8002694:	080026ab 	.word	0x080026ab
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
 800269c:	e150      	b.n	8002940 <UART_SetConfig+0x348>
 800269e:	2302      	movs	r3, #2
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e14d      	b.n	8002940 <UART_SetConfig+0x348>
 80026a4:	2304      	movs	r3, #4
 80026a6:	77fb      	strb	r3, [r7, #31]
 80026a8:	e14a      	b.n	8002940 <UART_SetConfig+0x348>
 80026aa:	2308      	movs	r3, #8
 80026ac:	77fb      	strb	r3, [r7, #31]
 80026ae:	e147      	b.n	8002940 <UART_SetConfig+0x348>
 80026b0:	2310      	movs	r3, #16
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e144      	b.n	8002940 <UART_SetConfig+0x348>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a83      	ldr	r2, [pc, #524]	@ (80028c8 <UART_SetConfig+0x2d0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d132      	bne.n	8002726 <UART_SetConfig+0x12e>
 80026c0:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <UART_SetConfig+0x2cc>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d828      	bhi.n	8002720 <UART_SetConfig+0x128>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <UART_SetConfig+0xdc>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	08002709 	.word	0x08002709
 80026d8:	08002721 	.word	0x08002721
 80026dc:	08002721 	.word	0x08002721
 80026e0:	08002721 	.word	0x08002721
 80026e4:	08002715 	.word	0x08002715
 80026e8:	08002721 	.word	0x08002721
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002721 	.word	0x08002721
 80026f4:	0800270f 	.word	0x0800270f
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002721 	.word	0x08002721
 8002704:	0800271b 	.word	0x0800271b
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e118      	b.n	8002940 <UART_SetConfig+0x348>
 800270e:	2302      	movs	r3, #2
 8002710:	77fb      	strb	r3, [r7, #31]
 8002712:	e115      	b.n	8002940 <UART_SetConfig+0x348>
 8002714:	2304      	movs	r3, #4
 8002716:	77fb      	strb	r3, [r7, #31]
 8002718:	e112      	b.n	8002940 <UART_SetConfig+0x348>
 800271a:	2308      	movs	r3, #8
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e10f      	b.n	8002940 <UART_SetConfig+0x348>
 8002720:	2310      	movs	r3, #16
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e10c      	b.n	8002940 <UART_SetConfig+0x348>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <UART_SetConfig+0x2d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d120      	bne.n	8002772 <UART_SetConfig+0x17a>
 8002730:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800273a:	2b30      	cmp	r3, #48	@ 0x30
 800273c:	d013      	beq.n	8002766 <UART_SetConfig+0x16e>
 800273e:	2b30      	cmp	r3, #48	@ 0x30
 8002740:	d814      	bhi.n	800276c <UART_SetConfig+0x174>
 8002742:	2b20      	cmp	r3, #32
 8002744:	d009      	beq.n	800275a <UART_SetConfig+0x162>
 8002746:	2b20      	cmp	r3, #32
 8002748:	d810      	bhi.n	800276c <UART_SetConfig+0x174>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <UART_SetConfig+0x15c>
 800274e:	2b10      	cmp	r3, #16
 8002750:	d006      	beq.n	8002760 <UART_SetConfig+0x168>
 8002752:	e00b      	b.n	800276c <UART_SetConfig+0x174>
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e0f2      	b.n	8002940 <UART_SetConfig+0x348>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e0ef      	b.n	8002940 <UART_SetConfig+0x348>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e0ec      	b.n	8002940 <UART_SetConfig+0x348>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e0e9      	b.n	8002940 <UART_SetConfig+0x348>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0e6      	b.n	8002940 <UART_SetConfig+0x348>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <UART_SetConfig+0x2d8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d120      	bne.n	80027be <UART_SetConfig+0x1c6>
 800277c:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <UART_SetConfig+0x2cc>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002786:	2bc0      	cmp	r3, #192	@ 0xc0
 8002788:	d013      	beq.n	80027b2 <UART_SetConfig+0x1ba>
 800278a:	2bc0      	cmp	r3, #192	@ 0xc0
 800278c:	d814      	bhi.n	80027b8 <UART_SetConfig+0x1c0>
 800278e:	2b80      	cmp	r3, #128	@ 0x80
 8002790:	d009      	beq.n	80027a6 <UART_SetConfig+0x1ae>
 8002792:	2b80      	cmp	r3, #128	@ 0x80
 8002794:	d810      	bhi.n	80027b8 <UART_SetConfig+0x1c0>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <UART_SetConfig+0x1a8>
 800279a:	2b40      	cmp	r3, #64	@ 0x40
 800279c:	d006      	beq.n	80027ac <UART_SetConfig+0x1b4>
 800279e:	e00b      	b.n	80027b8 <UART_SetConfig+0x1c0>
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e0cc      	b.n	8002940 <UART_SetConfig+0x348>
 80027a6:	2302      	movs	r3, #2
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e0c9      	b.n	8002940 <UART_SetConfig+0x348>
 80027ac:	2304      	movs	r3, #4
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e0c6      	b.n	8002940 <UART_SetConfig+0x348>
 80027b2:	2308      	movs	r3, #8
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e0c3      	b.n	8002940 <UART_SetConfig+0x348>
 80027b8:	2310      	movs	r3, #16
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e0c0      	b.n	8002940 <UART_SetConfig+0x348>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a44      	ldr	r2, [pc, #272]	@ (80028d4 <UART_SetConfig+0x2dc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d125      	bne.n	8002814 <UART_SetConfig+0x21c>
 80027c8:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <UART_SetConfig+0x2cc>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027d6:	d017      	beq.n	8002808 <UART_SetConfig+0x210>
 80027d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027dc:	d817      	bhi.n	800280e <UART_SetConfig+0x216>
 80027de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e2:	d00b      	beq.n	80027fc <UART_SetConfig+0x204>
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e8:	d811      	bhi.n	800280e <UART_SetConfig+0x216>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <UART_SetConfig+0x1fe>
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f2:	d006      	beq.n	8002802 <UART_SetConfig+0x20a>
 80027f4:	e00b      	b.n	800280e <UART_SetConfig+0x216>
 80027f6:	2300      	movs	r3, #0
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	e0a1      	b.n	8002940 <UART_SetConfig+0x348>
 80027fc:	2302      	movs	r3, #2
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e09e      	b.n	8002940 <UART_SetConfig+0x348>
 8002802:	2304      	movs	r3, #4
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e09b      	b.n	8002940 <UART_SetConfig+0x348>
 8002808:	2308      	movs	r3, #8
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e098      	b.n	8002940 <UART_SetConfig+0x348>
 800280e:	2310      	movs	r3, #16
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e095      	b.n	8002940 <UART_SetConfig+0x348>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <UART_SetConfig+0x2e0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d125      	bne.n	800286a <UART_SetConfig+0x272>
 800281e:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800282c:	d017      	beq.n	800285e <UART_SetConfig+0x266>
 800282e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002832:	d817      	bhi.n	8002864 <UART_SetConfig+0x26c>
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002838:	d00b      	beq.n	8002852 <UART_SetConfig+0x25a>
 800283a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800283e:	d811      	bhi.n	8002864 <UART_SetConfig+0x26c>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <UART_SetConfig+0x254>
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002848:	d006      	beq.n	8002858 <UART_SetConfig+0x260>
 800284a:	e00b      	b.n	8002864 <UART_SetConfig+0x26c>
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e076      	b.n	8002940 <UART_SetConfig+0x348>
 8002852:	2302      	movs	r3, #2
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e073      	b.n	8002940 <UART_SetConfig+0x348>
 8002858:	2304      	movs	r3, #4
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e070      	b.n	8002940 <UART_SetConfig+0x348>
 800285e:	2308      	movs	r3, #8
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e06d      	b.n	8002940 <UART_SetConfig+0x348>
 8002864:	2310      	movs	r3, #16
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e06a      	b.n	8002940 <UART_SetConfig+0x348>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <UART_SetConfig+0x2e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d138      	bne.n	80028e6 <UART_SetConfig+0x2ee>
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <UART_SetConfig+0x2cc>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800287e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002882:	d017      	beq.n	80028b4 <UART_SetConfig+0x2bc>
 8002884:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002888:	d82a      	bhi.n	80028e0 <UART_SetConfig+0x2e8>
 800288a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288e:	d00b      	beq.n	80028a8 <UART_SetConfig+0x2b0>
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002894:	d824      	bhi.n	80028e0 <UART_SetConfig+0x2e8>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <UART_SetConfig+0x2aa>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289e:	d006      	beq.n	80028ae <UART_SetConfig+0x2b6>
 80028a0:	e01e      	b.n	80028e0 <UART_SetConfig+0x2e8>
 80028a2:	2300      	movs	r3, #0
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e04b      	b.n	8002940 <UART_SetConfig+0x348>
 80028a8:	2302      	movs	r3, #2
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e048      	b.n	8002940 <UART_SetConfig+0x348>
 80028ae:	2304      	movs	r3, #4
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e045      	b.n	8002940 <UART_SetConfig+0x348>
 80028b4:	2308      	movs	r3, #8
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e042      	b.n	8002940 <UART_SetConfig+0x348>
 80028ba:	bf00      	nop
 80028bc:	efff69f3 	.word	0xefff69f3
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40004400 	.word	0x40004400
 80028cc:	40004800 	.word	0x40004800
 80028d0:	40004c00 	.word	0x40004c00
 80028d4:	40005000 	.word	0x40005000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	40007800 	.word	0x40007800
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e02c      	b.n	8002940 <UART_SetConfig+0x348>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a72      	ldr	r2, [pc, #456]	@ (8002ab4 <UART_SetConfig+0x4bc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d125      	bne.n	800293c <UART_SetConfig+0x344>
 80028f0:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <UART_SetConfig+0x4c0>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80028fe:	d017      	beq.n	8002930 <UART_SetConfig+0x338>
 8002900:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002904:	d817      	bhi.n	8002936 <UART_SetConfig+0x33e>
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800290a:	d00b      	beq.n	8002924 <UART_SetConfig+0x32c>
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002910:	d811      	bhi.n	8002936 <UART_SetConfig+0x33e>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <UART_SetConfig+0x326>
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291a:	d006      	beq.n	800292a <UART_SetConfig+0x332>
 800291c:	e00b      	b.n	8002936 <UART_SetConfig+0x33e>
 800291e:	2300      	movs	r3, #0
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e00d      	b.n	8002940 <UART_SetConfig+0x348>
 8002924:	2302      	movs	r3, #2
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e00a      	b.n	8002940 <UART_SetConfig+0x348>
 800292a:	2304      	movs	r3, #4
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e007      	b.n	8002940 <UART_SetConfig+0x348>
 8002930:	2308      	movs	r3, #8
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e004      	b.n	8002940 <UART_SetConfig+0x348>
 8002936:	2310      	movs	r3, #16
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e001      	b.n	8002940 <UART_SetConfig+0x348>
 800293c:	2310      	movs	r3, #16
 800293e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002948:	d15b      	bne.n	8002a02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d828      	bhi.n	80029a2 <UART_SetConfig+0x3aa>
 8002950:	a201      	add	r2, pc, #4	@ (adr r2, 8002958 <UART_SetConfig+0x360>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	0800297d 	.word	0x0800297d
 800295c:	08002985 	.word	0x08002985
 8002960:	0800298d 	.word	0x0800298d
 8002964:	080029a3 	.word	0x080029a3
 8002968:	08002993 	.word	0x08002993
 800296c:	080029a3 	.word	0x080029a3
 8002970:	080029a3 	.word	0x080029a3
 8002974:	080029a3 	.word	0x080029a3
 8002978:	0800299b 	.word	0x0800299b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7ff f8c4 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002980:	61b8      	str	r0, [r7, #24]
        break;
 8002982:	e013      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002984:	f7ff f8d4 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002988:	61b8      	str	r0, [r7, #24]
        break;
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800298c:	4b4b      	ldr	r3, [pc, #300]	@ (8002abc <UART_SetConfig+0x4c4>)
 800298e:	61bb      	str	r3, [r7, #24]
        break;
 8002990:	e00c      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002992:	f7fe ffa7 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8002996:	61b8      	str	r0, [r7, #24]
        break;
 8002998:	e008      	b.n	80029ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800299a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800299e:	61bb      	str	r3, [r7, #24]
        break;
 80029a0:	e004      	b.n	80029ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	77bb      	strb	r3, [r7, #30]
        break;
 80029aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d074      	beq.n	8002a9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	005a      	lsls	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d916      	bls.n	80029fc <UART_SetConfig+0x404>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d212      	bcs.n	80029fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e04f      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77bb      	strb	r3, [r7, #30]
 8002a00:	e04c      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a02:	7ffb      	ldrb	r3, [r7, #31]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d828      	bhi.n	8002a5a <UART_SetConfig+0x462>
 8002a08:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <UART_SetConfig+0x418>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a3d 	.word	0x08002a3d
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a5b 	.word	0x08002a5b
 8002a20:	08002a4b 	.word	0x08002a4b
 8002a24:	08002a5b 	.word	0x08002a5b
 8002a28:	08002a5b 	.word	0x08002a5b
 8002a2c:	08002a5b 	.word	0x08002a5b
 8002a30:	08002a53 	.word	0x08002a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a34:	f7ff f868 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002a38:	61b8      	str	r0, [r7, #24]
        break;
 8002a3a:	e013      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f7ff f878 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002a40:	61b8      	str	r0, [r7, #24]
        break;
 8002a42:	e00f      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <UART_SetConfig+0x4c4>)
 8002a46:	61bb      	str	r3, [r7, #24]
        break;
 8002a48:	e00c      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4a:	f7fe ff4b 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8002a4e:	61b8      	str	r0, [r7, #24]
        break;
 8002a50:	e008      	b.n	8002a64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e004      	b.n	8002a64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77bb      	strb	r3, [r7, #30]
        break;
 8002a62:	bf00      	nop
    }

    if (pclk != 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085a      	lsrs	r2, r3, #1
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d909      	bls.n	8002a98 <UART_SetConfig+0x4a0>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8a:	d205      	bcs.n	8002a98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e001      	b.n	8002a9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007c00 	.word	0x40007c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400

08002ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bbe:	d10a      	bne.n	8002bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b098      	sub	sp, #96	@ 0x60
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c14:	f7fd ffc4 	bl	8000ba0 <HAL_GetTick>
 8002c18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d12e      	bne.n	8002c86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f88c 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d021      	beq.n	8002c86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e6      	bne.n	8002c42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e062      	b.n	8002d4c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d149      	bne.n	8002d28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f856 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03c      	beq.n	8002d28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	623b      	str	r3, [r7, #32]
   return(result);
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e6      	bne.n	8002cae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d00:	61fa      	str	r2, [r7, #28]
 8002d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e5      	bne.n	8002ce0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e011      	b.n	8002d4c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3758      	adds	r7, #88	@ 0x58
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d64:	e04f      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d6c:	d04b      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fd ff17 	bl	8000ba0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e04e      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d037      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b80      	cmp	r3, #128	@ 0x80
 8002d9a:	d034      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b40      	cmp	r3, #64	@ 0x40
 8002da0:	d031      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d110      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2208      	movs	r2, #8
 8002db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f8ff 	bl	8002fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e029      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002de0:	d111      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f8e5 	bl	8002fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e00f      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d0a0      	beq.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b097      	sub	sp, #92	@ 0x5c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e62:	d10e      	bne.n	8002e82 <UART_Start_Receive_IT+0x52>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <UART_Start_Receive_IT+0x48>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002e72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e76:	e02d      	b.n	8002ed4 <UART_Start_Receive_IT+0xa4>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	22ff      	movs	r2, #255	@ 0xff
 8002e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e80:	e028      	b.n	8002ed4 <UART_Start_Receive_IT+0xa4>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <UART_Start_Receive_IT+0x76>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <UART_Start_Receive_IT+0x6c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	22ff      	movs	r2, #255	@ 0xff
 8002e96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e9a:	e01b      	b.n	8002ed4 <UART_Start_Receive_IT+0xa4>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	227f      	movs	r2, #127	@ 0x7f
 8002ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ea4:	e016      	b.n	8002ed4 <UART_Start_Receive_IT+0xa4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eae:	d10d      	bne.n	8002ecc <UART_Start_Receive_IT+0x9c>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <UART_Start_Receive_IT+0x92>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	227f      	movs	r2, #127	@ 0x7f
 8002ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ec0:	e008      	b.n	8002ed4 <UART_Start_Receive_IT+0xa4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	223f      	movs	r2, #63	@ 0x3f
 8002ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eca:	e003      	b.n	8002ed4 <UART_Start_Receive_IT+0xa4>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2222      	movs	r2, #34	@ 0x22
 8002ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002f06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f20:	d107      	bne.n	8002f32 <UART_Start_Receive_IT+0x102>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	@ (8002fb4 <UART_Start_Receive_IT+0x184>)
 8002f2e:	669a      	str	r2, [r3, #104]	@ 0x68
 8002f30:	e002      	b.n	8002f38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a20      	ldr	r2, [pc, #128]	@ (8002fb8 <UART_Start_Receive_IT+0x188>)
 8002f36:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8002f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f60:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e6      	bne.n	8002f40 <UART_Start_Receive_IT+0x110>
 8002f72:	e018      	b.n	8002fa6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	613b      	str	r3, [r7, #16]
   return(result);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	69f9      	ldr	r1, [r7, #28]
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e6      	bne.n	8002f74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	375c      	adds	r7, #92	@ 0x5c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	0800322d 	.word	0x0800322d
 8002fb8:	08003085 	.word	0x08003085

08002fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b095      	sub	sp, #84	@ 0x54
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e6      	bne.n	8002fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	61fb      	str	r3, [r7, #28]
   return(result);
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3308      	adds	r3, #8
 8003014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800301c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e5      	bne.n	8002ff6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302e:	2b01      	cmp	r3, #1
 8003030:	d118      	bne.n	8003064 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0310 	bic.w	r3, r3, #16
 8003046:	647b      	str	r3, [r7, #68]	@ 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6979      	ldr	r1, [r7, #20]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	613b      	str	r3, [r7, #16]
   return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e6      	bne.n	8003032 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003078:	bf00      	nop
 800307a:	3754      	adds	r7, #84	@ 0x54
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b09c      	sub	sp, #112	@ 0x70
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003092:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309c:	2b22      	cmp	r3, #34	@ 0x22
 800309e:	f040 80b9 	bne.w	8003214 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80030b0:	b2d9      	uxtb	r1, r3
 80030b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	400a      	ands	r2, r1
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 809c 	bne.w	8003224 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800310c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e6      	bne.n	80030ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	667b      	str	r3, [r7, #100]	@ 0x64
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3308      	adds	r3, #8
 800313c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800313e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800314c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e5      	bne.n	800311e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	623b      	str	r3, [r7, #32]
   return(result);
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003188:	663b      	str	r3, [r7, #96]	@ 0x60
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30
 8003194:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e6      	bne.n	8003174 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d12e      	bne.n	800320c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 0310 	bic.w	r3, r3, #16
 80031c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	617b      	str	r3, [r7, #20]
   return(result);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e6      	bne.n	80031b4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d103      	bne.n	80031fc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff f9ea 	bl	80025de <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800320a:	e00b      	b.n	8003224 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd f9bb 	bl	8000588 <HAL_UART_RxCpltCallback>
}
 8003212:	e007      	b.n	8003224 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	3770      	adds	r7, #112	@ 0x70
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b09c      	sub	sp, #112	@ 0x70
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800323a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003244:	2b22      	cmp	r3, #34	@ 0x22
 8003246:	f040 80b9 	bne.w	80033bc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800325a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800325e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003262:	4013      	ands	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003268:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 809c 	bne.w	80033cc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80032a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80032c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e6      	bne.n	8003294 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3308      	adds	r3, #8
 80032e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e5      	bne.n	80032c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	61fb      	str	r3, [r7, #28]
   return(result);
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800333c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e6      	bne.n	800331c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003352:	2b01      	cmp	r3, #1
 8003354:	d12e      	bne.n	80033b4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	60bb      	str	r3, [r7, #8]
   return(result);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f023 0310 	bic.w	r3, r3, #16
 8003370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	613b      	str	r3, [r7, #16]
   return(result);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e6      	bne.n	800335c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b10      	cmp	r3, #16
 800339a:	d103      	bne.n	80033a4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff f916 	bl	80025de <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033b2:	e00b      	b.n	80033cc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fd f8e7 	bl	8000588 <HAL_UART_RxCpltCallback>
}
 80033ba:	e007      	b.n	80033cc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0208 	orr.w	r2, r2, #8
 80033ca:	619a      	str	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	3770      	adds	r7, #112	@ 0x70
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <memset>:
 80033d4:	4402      	add	r2, r0
 80033d6:	4603      	mov	r3, r0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d100      	bne.n	80033de <memset+0xa>
 80033dc:	4770      	bx	lr
 80033de:	f803 1b01 	strb.w	r1, [r3], #1
 80033e2:	e7f9      	b.n	80033d8 <memset+0x4>

080033e4 <strncmp>:
 80033e4:	b510      	push	{r4, lr}
 80033e6:	b16a      	cbz	r2, 8003404 <strncmp+0x20>
 80033e8:	3901      	subs	r1, #1
 80033ea:	1884      	adds	r4, r0, r2
 80033ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d103      	bne.n	8003400 <strncmp+0x1c>
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d001      	beq.n	8003400 <strncmp+0x1c>
 80033fc:	2a00      	cmp	r2, #0
 80033fe:	d1f5      	bne.n	80033ec <strncmp+0x8>
 8003400:	1ad0      	subs	r0, r2, r3
 8003402:	bd10      	pop	{r4, pc}
 8003404:	4610      	mov	r0, r2
 8003406:	e7fc      	b.n	8003402 <strncmp+0x1e>

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	@ (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	@ (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	@ (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	@ (800344c <__libc_init_array+0x44>)
 800341c:	f000 f818 	bl	8003450 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	080034d0 	.word	0x080034d0
 8003444:	080034d0 	.word	0x080034d0
 8003448:	080034d0 	.word	0x080034d0
 800344c:	080034d4 	.word	0x080034d4

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
